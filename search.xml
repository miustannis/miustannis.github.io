<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客插入图片</title>
    <url>/2022/03/21/220321/</url>
    <content><![CDATA[<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>之前打算在文章中插入图片，配置的过程中遇到了一些问题。</p>
<span id="more"></span>
<p>想在博客中引用外站图片问题不大，但<strong>Hexo</strong>默认插入图片只有这一个方法，对有本地化需求的人群来说不够方便，此时可以安装一个满足本地图片引用的插件，在国内某知名（<strong>c</strong>）专业（<strong>s</strong>）开发者（<strong>d</strong>）社区（<strong>n</strong>）里提供的90%的方案为以下命令：<br><code>npm install hexo-asset-image –save</code><br>该论坛上相互借鉴蔚然成风的壮景对我这个刚入门的小白真是非常险恶，此指令安装版本落后，无法有效显示图片，有效的版本安装命令如下：<br><code>npm install https://github.com/CodeFalling/hexo-asset-image –save</code></p>
<p>修改<code>_config.yml</code>文件，将<code>post_asset_folder:</code>值改为<strong>true</strong>。</p>
<p>之后在新建一个博客的同时会生成同名文件夹，将需插入的图片放入该文件夹即可。文章中的具体引用代码为以下格式：(后来发现在<code>source</code>文件夹里新建一个名为<code>images</code>的文件夹存放图片也行)<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token tag">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span>(1/image.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<h2 id="更改相对位置"><a href="#更改相对位置" class="headerlink" title="更改相对位置"></a>更改相对位置</h2><p>但这种方法在PC端有一个默认的问题就是图片插入后会自动左对齐，想要实现居中对齐，可以在<strong>markdown</strong>引用代码外部添加<strong>center</strong>元素，或者直接添加<strong>html</strong>元素，如下所示：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;center<span class="token punctuation">></span>

<span class="token tag">!</span><span class="token punctuation">[</span><span class="token punctuation">...</span><span class="token punctuation">]</span>(xxx)

&lt;/center<span class="token punctuation">></span>

&lt;<span class="token tag">!--or</span> <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>

&lt;div align=center<span class="token punctuation">></span>

<span class="token tag">!</span><span class="token punctuation">[</span><span class="token punctuation">...</span><span class="token punctuation">]</span>(xxx)

&lt;/div<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>(因为我用VScode来打开博客的md文件进行编辑，在上传至本地网页时一开始发现图片无法加载，后来排查得出居中命令代码间的空行是必要的，不知道其他编辑器是否有这样的问题。)</p>
<p>还可以直接修改<strong>css</strong>文件，因为<strong>markdown</strong>插入图片的代码在最终渲染的时候变为<strong>html</strong>中的<strong>img</strong>元素。因此可以直接去博客主题文件的源代码中，找到控制文章内图片显示样式的<strong>css</strong>代码，将其修改成水平居中即可。前端编程中修改水平居中的方法非常多，以下是网上资源中提供的其中一种：</p>
<p>一般情况下可以在<strong>Hexo</strong>博客文件夹进入到主题模板的<code>themes-&gt;(主题名称文件夹)-&gt;source-&gt;css-&gt;_partial</code>中，找到<code>post.styl</code>文件，该<strong>post</strong>文件中保存的就是文章详情页里面的显示样式。然后找到里面正确的<strong>img</strong>元素，修改其样式，增加<code>margin 0 auto</code>这行指令。如下:<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">.post<span class="token punctuation">-</span>content
    position relative
    color c<span class="token punctuation">-</span><span class="token number">666</span>
    img
      max<span class="token punctuation">-</span>width 100%
      cursor pointer
      display block 
      margin 0 auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>然后可以实现了。但我在自己当前使用的主题中并没有找到相关语段，由于技术比较拉跨，我决定还是先老实用前两种吧。</p>
<p>[后期补丁：你需要一款名为<strong><em>Typora</em></strong>的<strong>markdown</strong>编辑软件]</p>
]]></content>
      <categories>
        <category>Projects &amp; DIY</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>yaml</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32配置笔记</title>
    <url>/2024/11/21/241121/</url>
    <content><![CDATA[<p>大二学习STM32G4系列的笔记，upload当乐高说明书看</p>
<span id="more"></span>
<p><strong>pdf嵌入使用了pdf.js插件</strong>，hexo-pdf这个插件在移动端不能很好地显示</p>
<iframe src="/pdfjs/web/viewer.html?file=/pdf/post1.pdf" style="width:100%;height:800px"></iframe>
]]></content>
      <categories>
        <category>Learning Record</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客启用测试</title>
    <url>/2022/03/14/220314/</url>
    <content><![CDATA[<p>test</p>
<p>测试</p>
<p>試験</p>
<p><em>テスト</em></p>
]]></content>
      <categories>
        <category>Projects &amp; DIY</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Xiaomi路由器BE3600快速救砖</title>
    <url>/2025/02/13/250213/</url>
    <content><![CDATA[<p>家里的路由器变砖了（具体原因不清楚）</p>
<p>指示灯由蓝色常亮变成橙色常亮，对于家用路由器这种消费电子产品，一般重启一下能解决90%的故障</p>
<p>但心血来潮想试一下给它刷个机</p>
<p>型号是这个：</p>
<center>
    <img src="/images/homecraft/miwifi1.webp" width="500">
</center>


<p>刷机需要一根网线，PC，以及变砖的路由器</p>
<p>步骤如下：</p>
<ul>
<li>在网址<a href="https://www1.miwifi.com/miwifi_download.html">MiWiFi</a>中找到刷机软件与对应型号的ROM固件</li>
<li>关闭PC的防火墙，将网线连接至路由器的LAN口，本型号WAN与LAN口二合一了,随便找个口插上就行</li>
<li>打开刷机软件并载入对应的固件</li>
</ul>
<center>
    <img src="/images/homecraft/miwifi2.webp" width="500">
</center>


<ul>
<li>用工具按住路由器的reset键后通电源，这一步非常像之前给单片机内部flash进行ISP下载程序的步骤，因此感觉很熟悉</li>
<li>待指示灯闪烁后松开reset键，固件开始下载</li>
</ul>
<center>
    <img src="/images/homecraft/miwifi3.webp" width="500">
</center>


<ul>
<li>路由器变为蓝灯闪烁，此时已经刷机完成，当新路由器用就行</li>
</ul>
]]></content>
      <categories>
        <category>Projects &amp; DIY</category>
      </categories>
      <tags>
        <tag>改装</tag>
      </tags>
  </entry>
  <entry>
    <title>UART收发处理函数</title>
    <url>/2024/10/20/241020/</url>
    <content><![CDATA[<p>UART（Universal Asynchronous Receiver/Transmitter）是一种串行通信协议，在嵌入式系统和微控制器间数据传输中发挥着核心作用。UART协议通过异步方式传输数据，不依赖于共享时钟信号，简化了通信线路的需求。每次传输包括起始位、数据位、可选的奇偶校验位以及停止位，这种结构支持从简单的传感器到复杂的处理器之间的可靠数据交换。</p>
<p>其重要性还体现在其广泛的兼容性和低成本实现上。它可以通过简单的两线（TX和RX）接口实现全双工通信，极大地降低了系统的硬件复杂性。此外，UART通信协议可以适应不同的波特率设置，使其能够灵活地调整以匹配特定应用的速度要求。在许多工业和消费电子产品中，UART仍然是实现可靠串行通信的首选技术，尤其在资源受限的环境中显示出其高效和经济的优势。（<strong>以上均为GPT生成</strong>）</p>
<p>在进行传感器测试时，常用到UART，这里mark一下自己常用的HAL库函数封装，免得后续一直翻之前的程序</p>
<p>函数需要用到的全局变量如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> send<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//传输用字符数组，储存字符串</span>

<span class="token class-name">uint8_t</span> rx_buffer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//接收字符缓冲区</span>

<span class="token keyword">char</span> rx_receiver<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//接收用字符数组</span>

<span class="token class-name">uint8_t</span> rx_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//接收字符数量</span>

<span class="token class-name">uint8_t</span>  uart_start_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//接收标志位</span>

__IO  <span class="token class-name">uint32_t</span> uart_gettick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//系统时钟比较变量</span>

<span class="token comment">/* 测试变量
uint16_t pwm_duty = 0;

uint8_t startbegin = 0xff;

uint8_t startbegin2 = 0x00;
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在硬件配置时要打开UART中断：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1 <span class="token punctuation">,</span> <span class="token operator">&amp;</span>rx_buffer<span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>中断回调函数如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>rx_num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  uart_gettick <span class="token operator">=</span> uwTick<span class="token punctuation">;</span> 
  uart_start_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>uart_start_flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  rx_receiver<span class="token punctuation">[</span>rx_num<span class="token punctuation">]</span> <span class="token operator">=</span> rx_buffer<span class="token punctuation">;</span>
  rx_num<span class="token operator">++</span><span class="token punctuation">;</span>  
  <span class="token punctuation">&#125;</span>
  <span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1 <span class="token punctuation">,</span> <span class="token operator">&amp;</span>rx_buffer<span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主循环中的处理函数如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">UART_RX_PROC</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span> uwTick<span class="token operator">-</span> uart_gettick <span class="token punctuation">)</span> <span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> uwTick<span class="token operator">-</span> uart_gettick <span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">600</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>uart_start_flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rx_receiver<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&amp;'</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> rx_num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//示例：传输pwm占空比</span>
    pwm_duty <span class="token operator">=</span>  rx_receiver<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> rx_num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    pwm_duty <span class="token operator">=</span> <span class="token punctuation">(</span>rx_receiver<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> rx_receiver<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> rx_num <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    pwm_duty <span class="token operator">=</span> <span class="token punctuation">(</span>rx_receiver<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token punctuation">(</span>rx_receiver<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> rx_receiver<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>      
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> rx_num <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    pwm_duty <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>startbegin<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>startbegin2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>startbegin<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rx_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uart_start_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的函数主要是用以处理字符串的，应付一些的简单的应用已经够用了，当然，也能在此基础上扩展。</p>
]]></content>
      <categories>
        <category>Learning Record</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Harvard CS50 Study Log</title>
    <url>/2025/03/06/250306/</url>
    <content><![CDATA[<h3 id="Lecture-0-Scratch"><a href="#Lecture-0-Scratch" class="headerlink" title="Lecture 0 Scratch"></a><strong>Lecture 0 Scratch</strong></h3><h3 id="Lecture-1-C"><a href="#Lecture-1-C" class="headerlink" title="Lecture 1 C"></a><strong>Lecture 1 C</strong></h3><h3 id="Lecture-2-Arrays"><a href="#Lecture-2-Arrays" class="headerlink" title="Lecture 2 Arrays"></a><strong>Lecture 2 Arrays</strong></h3><h3 id="Lecture-3-Algorithms"><a href="#Lecture-3-Algorithms" class="headerlink" title="Lecture 3 Algorithms"></a><strong>Lecture 3 Algorithms</strong></h3><ul>
<li><strong>Time Complexity</strong> is an important metric used to measure the relationship between the running time of an algorithm and the size of the input. It describes how the execution time of an algorithm increases as the input size grows. Time complexity helps us assess the efficiency of an algorithm under different problem sizes, allowing us to choose the most appropriate algorithm. Time complexity is usually expressed using Big $O$ notation. <ol>
<li>selection sort:     $ O(n^2) $</li>
<li>bubble sort：    $ O(n^2) $</li>
<li>insertion sort：    $ O(n^2) $</li>
<li>merge sort：    $ O(nlogn) $</li>
</ol>
</li>
</ul>
<p>&nbsp;</p>
<h3 id="Lecture-4-Memory"><a href="#Lecture-4-Memory" class="headerlink" title="Lecture 4 Memory"></a><strong>Lecture 4 Memory</strong></h3><ul>
<li><p>This section basically start from the pixels which formed by RGB code, for example 0xFF0000(using hexadecimal or base16 — <strong>0x</strong>) . Why hexadecimal ?  Using binary, it takes 4 bits to represent 16 possibilities. Using hexadecimal, 4 bits -&gt; one digit, that’s easier. So one byte, two of them, is a common unit of measurement.</p>
<center>
    <img src="/images/cs50/cs50_1.webp" width="800">
</center>
</li>
<li><p>Then it comes to the tool or variable commonly used in C language which is <strong>pointer</strong>. <strong>A pointer is an address</strong>. </p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// --50</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -- some address</span>

<span class="token comment">//the following sytanx are slightly differrent!</span>

<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>n<span class="token punctuation">;</span> <span class="token comment">// also int* p = &amp;n; they are the same, to specify a data type</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -- same address above</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// *p: go there --50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> “&amp;a” means the address of a, “*“ is a dereference operator, which allows you to take an address, and <strong>go to</strong> it.</p>
<p>By convention, pointers take up more space, they account for 8 bytes. 32-bit machine differs from 64-bit machine in the width of address bus, where 64-bit machine has larger memory.</p>
</li>
<li><p>Strings, arrays of char so to speak, live at some address. They are continuous in memory from left to right, with 1 byte from each other.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">string s <span class="token operator">=</span> <span class="token string">"CS50!"</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--CS50!</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--some address</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--address same as above</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--address above + 0x1</span>

<span class="token comment">//technically string is not an actual datatype</span>
string s <span class="token operator">=</span> <span class="token string">"CS50!"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">"CS50!"</span><span class="token punctuation">;</span>

<span class="token comment">//typedef char* string; !!</span>

<span class="token comment">//char* s = "CS50!"; "&amp;" is not needed here because CLANG puts the address of the first char in the variable when a double quote shows up.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>s is technically a pointer</strong>, to find the beginning of the string.</p>
</li>
<li><p>pointer arithmetic: doing math on addresses </p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">"CS50"</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -- C</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -- S</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -- C</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -- S</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>memory allocate:  FREE &amp; MALLOC</p>
<center>
    <img src="/images/cs50/cs50_3.webp" width="800">
</center>




</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>特性</th>
<th>栈（Stack）</th>
<th>堆（Heap）</th>
</tr>
</thead>
<tbody>
<tr>
<td>管理方式</td>
<td>自动（编译器/操作系统）</td>
<td>手动（程序员malloc）</td>
</tr>
<tr>
<td>分配速度</td>
<td>快（直接移动指针）</td>
<td>慢（需要查找可用内存）</td>
</tr>
<tr>
<td>生命周期</td>
<td>函数调用结束就释放</td>
<td>显式释放（free）</td>
</tr>
<tr>
<td>大小限制</td>
<td>较小（几MB）</td>
<td>较大（受系统内存限制）</td>
</tr>
<tr>
<td>存储内容</td>
<td>局部变量、函数调用信息</td>
<td>动态分配的对象、大型数据</td>
</tr>
<tr>
<td>碎片问题</td>
<td>无</td>
<td>可能产生内存碎片</td>
</tr>
</tbody>
</table>
</div>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//program for string operating</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cs50.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">get_string</span><span class="token punctuation">(</span><span class="token string">"s: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fuction from cs50.h</span>
    
    <span class="token keyword">char</span> <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// malloc : memory allocate </span>
    <span class="token comment">// return the first address of the memory</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
     <span class="token comment">// "NULL" no memory available</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">strcpy</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// equivalent</span>
        
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    <span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//free the memory mallocated，always remember to free</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// Upper the first Character</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>valgrind: prog that check memory mistake</p>
<center>
    <img src="/images/cs50/cs50_2.webp" width="800">
</center>
</li>
<li><p>garbage values</p>
</li>
<li><p>matter of scope “{ }” passing by reference</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>b <span class="token operator">=</span> temp
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<center>
    <img src="/images/cs50/cs50_4.webp" width="800">
</center>
</li>
<li><p>File I/O</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//program for file writing --phonebook</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cs50.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   FILE <span class="token operator">*</span>file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"phonebook.csv"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
       <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">char</span> <span class="token operator">*</span>name <span class="token operator">=</span> <span class="token function">get_string</span><span class="token punctuation">(</span><span class="token string">"Name: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> <span class="token operator">*</span>number <span class="token operator">=</span> <span class="token function">get_string</span><span class="token punctuation">(</span><span class="token string">"Number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
   <span class="token function">fprintf</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"%s,%s\n,name,number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//program for file copy</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>

<span class="token keyword">typedef</span> <span class="token class-name">uint8_t</span> BYTE<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// use command line</span>
<span class="token punctuation">&#123;</span>
    FILE <span class="token operator">*</span>src <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    BYTE b<span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">fclose</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>&nbsp;</p>
<h3 id="Lecture-5-Data-Structures"><a href="#Lecture-5-Data-Structures" class="headerlink" title="Lecture 5 Data Structures"></a><strong>Lecture 5 Data Structures</strong></h3><ul>
<li><p>abstract data types</p>
<ul>
<li><p><strong>queues</strong>: FIFO (enqueue &amp; dequeue)</p>
</li>
<li><p><strong>stacks</strong>: LIFO (like email systems, push &amp; pop)</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//prog for dynamic memory allocate without linked list</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token comment">// if more space is needed to be allocated dynamicly</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// free the original memory</span>
        <span class="token function">free</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token comment">// free the original memory</span>
    <span class="token function">free</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// reorientation</span>
    list <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>linked list</strong></p>
<center>
    <img src="/images/cs50/cs50_5.webp" width="800">
</center>


</li>
</ul>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//template </span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> node<span class="token punctuation">;</span>

<span class="token comment">//create a linked list with one node</span>
node <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

node <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

n <span class="token operator">-></span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//(*n).number = 1;</span>
n <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

list <span class="token operator">=</span> n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// enter a linked list and print</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> node<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    node <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        node <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//Free memory thus far</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        n<span class="token operator">-></span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>
        n<span class="token operator">-></span>next <span class="token operator">=</span> list<span class="token punctuation">;</span>
        list <span class="token operator">=</span> n<span class="token punctuation">;</span>   
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//print whole list</span>
    node <span class="token operator">*</span>ptr <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i\n"</span><span class="token punctuation">,</span>ptr<span class="token operator">-></span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ptr <span class="token operator">=</span> ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  <center>
      <img src="/images/cs50/cs50_6.webp" width="800">
  </center>


<p>  adding nodes：    $ O(1) $</p>
<p>  searching nodes：    $ O(n) $</p>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// enter a reverse linked list and print</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> node<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    node <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        node <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//Free memory thus far</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        n<span class="token operator">-></span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>
        n<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        
        <span class="token comment">//if list is empty</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            list <span class="token operator">=</span> n<span class="token punctuation">;</span>   
        <span class="token punctuation">&#125;</span>
        
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>node <span class="token operator">*</span>ptr <span class="token operator">=</span> list<span class="token punctuation">;</span> ptr <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span> ptr <span class="token operator">=</span> ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    ptr<span class="token operator">-></span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> 
    
    <span class="token comment">//print whole list</span>
    node <span class="token operator">*</span>ptr <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i\n"</span><span class="token punctuation">,</span>ptr<span class="token operator">-></span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ptr <span class="token operator">=</span> ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  adding nodes：    $ O(n) $</p>
  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// enter a sequenced linked list </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> node<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    node <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        node <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//Free memory thus far</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        n<span class="token operator">-></span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>
        n<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        
        <span class="token comment">//if list is empty</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            list <span class="token operator">=</span> n<span class="token punctuation">;</span>   
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// if number belongs at beginning of the list</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>number <span class="token operator">&lt;</span> list<span class="token operator">-></span>number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            n<span class="token operator">-></span>next <span class="token operator">=</span> list<span class="token punctuation">;</span>
            list <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// if number belongs later of the list</span>

        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>           
            <span class="token keyword">for</span> <span class="token punctuation">(</span>node <span class="token operator">*</span>ptr <span class="token operator">=</span> list<span class="token punctuation">;</span> ptr <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span> ptr <span class="token operator">=</span> ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">// at end</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    ptr<span class="token operator">-></span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token comment">//in middle </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>number <span class="token operator">&lt;</span> ptr<span class="token operator">-></span>next<span class="token operator">-></span>number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    n<span class="token operator">-></span>next <span class="token operator">=</span> ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>
                    ptr<span class="token operator">-></span>next <span class="token operator">=</span> n<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> 
        <span class="token comment">//print whole list</span>
        node <span class="token operator">*</span>ptr <span class="token operator">=</span> list<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i\n"</span><span class="token punctuation">,</span>ptr<span class="token operator">-></span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ptr <span class="token operator">=</span> ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  adding nodes：    $ O(n) $</p>
<ul>
<li><p><strong>trees</strong></p>
<ul>
<li><p>binary search trees</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> node<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<center>
    <img src="/images/cs50/cs50_7.webp" width="800">
</center>



</li>
</ul>
</li>
</ul>
<p>  searching nodes：    $ O(logn) $</p>
<ul>
<li><p><strong>dictionaries</strong></p>
<ul>
<li><p><strong>hashing</strong> : mapping objects into finite number of outputs</p>
</li>
<li><p>hashing function</p>
</li>
<li><p>hash tables: array of linked lists</p>
<center>
    <img src="/images/cs50/cs50_8.webp" width="800">
</center>
</li>
<li><p>collision expectation</p>
</li>
<li><p>$ O(n/k) - O(n) $</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>tries</strong>: a tree of arrays</p>
<center>
    <img src="/images/cs50/cs50_9.webp" width="800">
</center>


</li>
</ul>
<p>  $ O(k)- O(1)$</p>
<p>&nbsp;</p>
<h3 id="Lecture-6-Python-amp-Artificial-Intelligence"><a href="#Lecture-6-Python-amp-Artificial-Intelligence" class="headerlink" title="Lecture 6 Python &amp; Artificial Intelligence"></a><strong>Lecture 6 Python &amp; Artificial Intelligence</strong></h3><ul>
<li><p>Python manages your memory automatically. It may take more memory than C.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python version of hash table in Problem set 5</span>
words <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> word<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> words

<span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        words<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">unload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>Python has greater ecosystem for developers, basically more libs. Example:  Face detection</p>
</li>
<li><p>common IO syntax, you don’t have to specify the type of your variables</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">answer <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"output, "</span> <span class="token operator">+</span> answer<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"output,"</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"output,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>answer<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

<span class="token comment">#type: bool float int str list set ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>intent matters</strong></p>
</li>
<li><p><strong>object oriented program(OOP):</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"opinion: "</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># s = input("opinion: ").lower()</span>

<span class="token keyword">if</span> s <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">,</span><span class="token string">"yes"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"agreed"</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> s <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"n"</span><span class="token punctuation">,</span><span class="token string">"no"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"not agreed"</span><span class="token punctuation">)</span>
    
<span class="token comment">#loop</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>
    
<span class="token comment">#function exception</span>
<span class="token keyword">def</span> <span class="token function">get_int</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    	<span class="token keyword">try</span><span class="token punctuation">:</span> 
        	<span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">)</span>
    	<span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
        	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"not an integer"</span><span class="token punctuation">)</span>
            
<span class="token comment">#for loop can end with an else </span>
people <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"carter1"</span><span class="token punctuation">,</span><span class="token string">"number"</span><span class="token punctuation">:</span><span class="token string">"+1-555-986-1004"</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"carter2"</span><span class="token punctuation">,</span><span class="token string">"number"</span><span class="token punctuation">:</span><span class="token string">"+1-555-986-1004"</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"carter3"</span><span class="token punctuation">,</span><span class="token string">"number"</span><span class="token punctuation">:</span><span class="token string">"+1-555-986-1004"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span>

name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Name: "</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> person <span class="token keyword">in</span> people<span class="token punctuation">:</span>
    <span class="token keyword">if</span> person<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> name<span class="token punctuation">:</span>
        number <span class="token operator">=</span> person<span class="token punctuation">[</span><span class="token string">"number"</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Found </span><span class="token interpolation"><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Not found"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<ul>
<li>the Artificial Intelligence part is more <strong>“introductory”</strong> and basic for learning<ul>
<li>prompt engineering</li>
<li>minimax behavior</li>
<li>machine learning</li>
<li>reinforce learning (in robotics)</li>
<li>explore vs exploit.</li>
<li>deep learning</li>
<li>generative artificial intelligence(large language models\transformer\attention values)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<h3 id="Lecture-7-SQL"><a href="#Lecture-7-SQL" class="headerlink" title="Lecture 7 SQL"></a><strong>Lecture 7 SQL</strong></h3><ul>
<li><p>SQL: a database-centric language <strong>(Structured Query Language)</strong></p>
</li>
<li><p>flat file database example: csv</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#csv example</span>
<span class="token keyword">import</span> csv

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"favorites.csv"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictReader<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
    counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
        favorite <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">"language"</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> favorite <span class="token keyword">in</span> counts<span class="token punctuation">:</span>
            counts<span class="token punctuation">[</span>favorite<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            counts<span class="token punctuation">[</span>favorite<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
            
<span class="token keyword">for</span> favorite <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>counts<span class="token punctuation">,</span> key <span class="token operator">=</span> counts<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>favorite<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>counts<span class="token punctuation">[</span>favorite<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>relational database: CRUD(create read update delete || insert drop)</p>
</li>
<li><p>this lecture uses sqlite3, for mobile database.</p>
<pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">$ sqlite3 favorites.db
sqlite&gt; .mode csv
sqlite&gt; .import favorites.csv favorites --import csv to table
sqlite&gt; .quit

sqlite&gt; .schema --a sqlite command that shows the schema of the database

sqlite&gt; SELECT * FROM favorites; --show entire content of the table
sqlite&gt; SELECT language FROM favorites LIMIT 10; --show seletced content of the table

sqlite&gt; SELECT COUNT(*) FROM favorites; --total count
sqlite&gt; SELECT COUNT(DISTINCT(language)) FROM favorites; --type count

sqlite&gt; SELECT COUNT(*) FROM favorites WHERE language &#x3D; &#39;C&#39;;
sqlite&gt; SELECT COUNT(*) FROM favorites WHERE language &#x3D; &#39;C&#39; AND problem &#x3D; &#39;Hello, World&#39;;

sqlite&gt; SELECT language, COUNT(*) FROM favorites GROUP BY language; --works as python code above

sqlite&gt; INSERT INTO favotites(language, problem) VALUES(&#39;SQL&#39;, &#39;fiftyville&#39;); --appending a new row to table
sqlite&gt; DELETE FROM favorites WHERE Timestamp IS NULL;--delete row
sqlite&gt; UPDATE favorites SET language &#x3D; &#39;SQL&#39;, problem &#x3D; &#39;fiftyville&#39;;--update and now all content has been changed which can be justified by WHERE...(condition)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>link different tables together <strong>one-to-one</strong>: <strong>primary key &amp; foreign key</strong>  </p>
<pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">-- IMDb example
sqlite&gt; SELECT * FROM shows WHERE id IN 
	...&gt;(SELECT show_id FROM ratings WHERE rating &gt;&#x3D; 6.0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>how to join two tables that have related keys?</p>
<pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">-- syntax &#39;JOIN&#39;
sqlite&gt; SELECT * FROM shows JOIN ratings ON shows.id &#x3D; ratings.show_id WHERE rating&gt;&#x3D; 6.0 LIMIT 10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<center>
    <img src="/images/cs50/sql.webp" width="800">
</center>
</li>
<li><p>link different tables together:  <strong>one-to-many</strong> ，<strong>many-to-many</strong></p>
</li>
</ul>
<p>​        just nested snytax.</p>
<ul>
<li><strong>SQL injection attack</strong>     just use placeholders and sanitize customer’s inputs</li>
</ul>
<p>&nbsp;</p>
<h3 id="Lecture-8-HTML-CSS-JavaScript"><a href="#Lecture-8-HTML-CSS-JavaScript" class="headerlink" title="Lecture 8 HTML, CSS, JavaScript"></a><strong>Lecture 8 HTML, CSS, JavaScript</strong></h3><ul>
<li><p>routes &amp; packets；a pair of protocols: <strong>TCP/IP</strong></p>
<p><strong>IPv4:</strong> #.#.#.# (0~255) 32 bits </p>
<p><strong>TCP:</strong> use sequence numbers to help servers multiplex, port numbers (80: HTTP 443: HTTPS)</p>
</li>
<li><p><strong>DNS</strong> (domain name system) servers</p>
<p>domain name -&gt; IP address</p>
<p>buy a domain name: pay someone(运营商) to associate an IP address with your domain name</p>
</li>
<li><p><strong>DHCP</strong> (dynamic host configuration protocol) 自动为设备分配地址</p>
</li>
<li><p><strong>HTTP</strong> (hypertext transmit protocol) <strong>HTTPS</strong> (hypertext transmit protocol secure) <strong>Internet</strong> protocol that allows a web browser to request and receive information from a web server</p>
</li>
<li><p><strong>HTML: </strong> (<strong>hypertext marker language</strong>) a really easy language that you can learn in 30 minutes. VSCode makes it even more convenient. but it can take a lot of effort to make good websites. </p>
<p>tags &amp; attributes: </p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--html: tag lang = "en": attributes --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>
            title
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        body
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>regular expressions: 正则表达式 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions</a></p>
<p>you can change your local copy of html by using developer tools</p>
</li>
<li><p><strong>CSS: </strong> (<strong>Cascading Style Sheets</strong>)</p>
<ul>
<li><p><strong>properties:</strong> example </p><p style="font-size: large"></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> large</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
              John Harvard
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> medium</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
              Welcome to my homepage
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> small</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
              Copyright <span class="token entity" title="&#169;">&amp;#169;</span> John Harvard
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>classes:</strong> your own style or style from third libraries</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
              <span class="token selector">.centered</span><span class="token punctuation">&#123;</span>
                  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              <span class="token selector">.large</span><span class="token punctuation">&#123;</span>
                  <span class="token property">font-size</span><span class="token punctuation">:</span> large<span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              <span class="token selector">.medium</span><span class="token punctuation">&#123;</span>
                  <span class="token property">font-size</span><span class="token punctuation">:</span> medium<span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              <span class="token selector">.small</span><span class="token punctuation">&#123;</span>
                  <span class="token property">font-size</span><span class="token punctuation">:</span> small<span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
          </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>centered<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>large<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
              John Harvard
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>medium<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
              Welcome to my homepage
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
              Copyright <span class="token entity" title="&#169;">&amp;#169;</span> John Harvard
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>​        样式可使用外链</p>
<p>​        #+… : ID</p>
<ul>
<li><strong>JavaScript </strong> </li>
</ul>
<p>&nbsp;</p>
<h3 id="Lecture-9-Flask"><a href="#Lecture-9-Flask" class="headerlink" title="Lecture 9 Flask"></a><strong>Lecture 9 Flask</strong></h3><ul>
<li><p><strong>flask</strong></p>
<p>a python third party library for <strong>web microframework</strong>  linking static(html) &amp; dynamic(python) files. We use the syntax <strong>“JINJA”</strong> to customize and formalize the outlook of the web. Following the lecture I made a simple web application to greet users, the GitHub link is <a href="https://github.com/miustannis/flask-greeting-web.git">https://github.com/miustannis/flask-greeting-web.git</a></p>
</li>
</ul>
<center>
    <img src="/images/cs50/flask1.webp" width="400">
</center>

<center>
    <img src="/images/cs50/flask2.webp" width="400">
</center>



<ul>
<li><p><strong>more web app examples</strong></p>
<p>There two other web examples for sports register and library system, which are more realistic with more functions and more html files. Data can be managed in a better way using <strong>SQL</strong>, other than just in SRAM.</p>
</li>
</ul>
<center>
    <img src="/images/cs50/flask3.webp" width="400">
</center>


<ul>
<li><p><strong>cookies</strong></p>
<p>tools that websites use to keep staying stateful. Server needs to remember something about the user, cookies will be <strong>sent back to server</strong> <strong>by browsers</strong> every time a user log in.</p>
<p>problems: cookies may be used for ads and tracking.</p>
</li>
</ul>
<p>&nbsp;</p>
<h3 id="Lecture-10-Cybersecurity"><a href="#Lecture-10-Cybersecurity" class="headerlink" title="Lecture 10 Cybersecurity"></a><strong>Lecture 10 Cybersecurity</strong></h3><ul>
<li><p>passwords</p>
<ul>
<li><p>brute-force attack</p>
</li>
<li><p>two-factor authentication (mostly hardware equipment)</p>
</li>
<li><p>one-time passwords</p>
</li>
<li><p>server uses hash function to compare passwords</p>
<center>
    <img src="/images/cs50/cybersalt.webp" width="400">
</center>
</li>
<li><p>cryptography: public key &amp; private key (HTTPS)</p>
</li>
<li><p>passkeys: generate public key and send it to the company, and a private one for verifying your signature combining the public key.</p>
</li>
<li><p>secure deletion -&gt; full disk encryption</p>
</li>
</ul>
</li>
</ul>
<p>*看此课程以温习basic coding和补充一些计算机思维，老师讲的很有激情，时间花的还算比较有价值</p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">  ______
| see you |
  ======
        <span class="token function selector">\
</span>         <span class="token function selector">\
</span>          <span class="token function selector">\
</span>           <span class="token function selector">\
</span>                                 / <span class="token function selector">\\</span>  //<span class="token function selector">\\</span>
                  |<span class="token function selector">\\</span>___/|      /   <span class="token function selector">\\</span>//  <span class="token function selector">\\</span><span class="token function selector">\\</span>
                  /0  0  <span class="token function selector">\\</span>__  /    //  | <span class="token function selector">\\</span> <span class="token function selector">\\</span>
                 /     /  <span class="token function selector">\\</span>/_/    //   |  <span class="token function selector">\\</span>  <span class="token function selector">\\</span>
                 <span class="token function selector">\@</span>_^_<span class="token function selector">\@</span>'/   <span class="token function selector">\\</span>/_   //    |   <span class="token function selector">\\</span>   <span class="token function selector">\\</span>
                 //_^_/     <span class="token function selector">\\</span>/_ //     |    <span class="token function selector">\\</span>    <span class="token function selector">\\</span>
              ( //) |        <span class="token function selector">\\</span>///      |     <span class="token function selector">\\</span>     <span class="token function selector">\\</span>
            ( / /) _|_ /   )  //       |      <span class="token function selector">\\</span>     _<span class="token function selector">\\</span>
          ( // /) '/,_ _ _/  ( ; -.    |    _ _<span class="token function selector">\\</span>.-~        .-~~~^-.
        (( / / )) ,-<span class="token punctuation">&#123;</span>        _      `-.|.-~-.           .~         `.
       (( // / ))  '/<span class="token function selector">\\</span>      /                 ~-. _ .-~      .-~^-.  <span class="token function selector">\\</span>
       (( /// ))      `.   <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>                   /      <span class="token function selector">\\</span>  <span class="token function selector">\\</span>
        (( / ))     .----~-.<span class="token function selector">\\</span>        <span class="token function selector">\\</span>-'                 .~         <span class="token function selector">\\</span>  `. <span class="token function selector">\\</span>^-.
                   ///.----..>        <span class="token function selector">\\</span>             _ -~             `.  ^-`  ^-_
                     ///-._ _ _ _ _ _ _<span class="token punctuation">&#125;</span>^ - - - - ~                     ~-- ,.-~
                                                                        /.-~
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Learning Record</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客插入数学公式</title>
    <url>/2025/03/27/250327/</url>
    <content><![CDATA[<p>在写一些内容时，会遇到需要添加数学公式的地方，Hexo部分主题不支持公式的渲染，比如我正在使用的vivia主题，在查阅一些资料之后，我使用<strong>MathJax</strong>引擎实现了vivia主题下的数学公式渲染。</p>
<p>MathJax简介：<a href="https://www.osgeo.cn/mathjax/basic/mathjax.html">https://www.osgeo.cn/mathjax/basic/mathjax.html</a> </p>
<p>该引擎是一款可在所有现代浏览器中工作的开源js显示引擎，辅助页面作者编写含有数学公式的文档</p>
<h4 id="Step-1-安装MathJax引擎并更换渲染引擎："><a href="#Step-1-安装MathJax引擎并更换渲染引擎：" class="headerlink" title="Step 1 : 安装MathJax引擎并更换渲染引擎："></a><strong>Step 1</strong> : 安装MathJax引擎并更换渲染引擎：</h4><p>​              操作包括卸载Hexo自带的Hexo-math，卸载默认的对MathJax不友好的marked引擎</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm uninstall hexo<span class="token operator">-</span>math <span class="token operator">--</span>save
npm install hexo<span class="token operator">-</span>renderer<span class="token operator">-</span>mathjax <span class="token operator">--</span>save

npm uninstall hexo<span class="token operator">-</span>renderer<span class="token operator">-</span>marked <span class="token operator">--</span>save
npm install hexo<span class="token operator">-</span>renderer<span class="token operator">-</span>kramed <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Step-2-更新MathJax的cdn链接"><a href="#Step-2-更新MathJax的cdn链接" class="headerlink" title="Step 2 : 更新MathJax的cdn链接"></a><strong>Step 2</strong> : 更新MathJax的cdn链接</h4><h4 id="Step-3-更改部分转义规则"><a href="#Step-3-更改部分转义规则" class="headerlink" title="Step 3 : 更改部分转义规则"></a><strong>Step 3</strong> : 更改部分转义规则</h4><p> hexo 默认的转义规则会将一些字符进行转义，所以要对默认的规则进行修改。<br>首先， 打开/node_modules/kramed/lib/rules/inline.js</p>
<p>把：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">escape</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\([\\`*&#123;&#125;\[\]()#$+\-.!_>])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
<span class="token literal-property property">em</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>更改为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">escape</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\([`*\[\]()# +\-.!_>])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
<span class="token literal-property property">em</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\*((?:\*\*|[\s\S])+?)\*(?!\*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="Step-4-主题未预配置下使用Hexo-filter-mathjax"><a href="#Step-4-主题未预配置下使用Hexo-filter-mathjax" class="headerlink" title="Step 4 : 主题未预配置下使用Hexo-filter-mathjax"></a><strong>Step 4</strong> : 主题未预配置下使用Hexo-filter-mathjax</h4><p>对于已经配置MathJax的主题来说，在相关config文件里打开控件即可，对于未配置的主题，可以使用Hexo-filter-mathjax来帮助实现</p>
<p>Hexo-filter-mathjax项目地址：<a href="https://github.com/next-theme/hexo-filter-mathjax">https://github.com/next-theme/hexo-filter-mathjax</a></p>
<p>安装：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>filter<span class="token operator">-</span>mathjax <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对需要开启的博文，在其Front-Matter处增加mathjax: true这一行即可，如：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> xxxxxx
<span class="token key atrule">categories</span><span class="token punctuation">:</span> xxxxx
<span class="token key atrule">date</span><span class="token punctuation">:</span> xxxx<span class="token punctuation">-</span>xx<span class="token punctuation">-</span>xx
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>公式：</p>
<p>$\Bbb{\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6} }$</p>
<p>$\frak{\cos 2\theta = \cos^2 \theta - \sin^2 \theta = 2 \cos^2 \theta-1}$</p>
<p>矩阵运算：</p>
<p>$\left(    \begin{array}{c}      s \\      t    \end{array}\right)=\left(    \begin{array}{cc}      cos(b) &amp; -sin(b) \\      sin(b) &amp; cos(b)    \end{array}\right)\left(    \begin{array}{c}      x \\      y    \end{array}\right)$                </p>
<p>*注意到有的cdn版本MathJax框架下公式字体对行间公式有一定影响，可能会一些字体会被渲染成主题相同字体，且移动端不能很好地显示</p>
<p>参考资料：</p>
<p><a href="https://www.cnblogs.com/wangxin37/p/8185688.html">https://www.cnblogs.com/wangxin37/p/8185688.html</a></p>
<p><a href="https://heartlessly.github.io/others/latex-mathjax-gong-shi-zi-ti-mei-hua/">https://heartlessly.github.io/others/latex-mathjax-gong-shi-zi-ti-mei-hua/</a></p>
]]></content>
      <categories>
        <category>Projects &amp; DIY</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>TFTLCD驱动</title>
    <url>/2024/09/28/240928/</url>
    <content><![CDATA[<p>在使用Img2LCD取模软件和ST7735S驱动IC控制LCD时，发现API中显示图片的函数调用后显示异常</p>
<p>原函数：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ST7735_DrawImage</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> w<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> h<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint16_t</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> ST7735_WIDTH<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> ST7735_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> ST7735_WIDTH<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">+</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> ST7735_HEIGHT<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token function">ST7735_Select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ST7735_SetAddressWindow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>w<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span>h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ST7735_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token operator">*</span>w<span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ST7735_Unselect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输入数据要求16位rgb565格式图片，与Img2LCD取模软件两个8位数表示一个像素点的编码逻辑不同，首次修改仅改了原函数输入数据的格式：将data16位常量数据指针类型改为8位无符号变量指针类型，且在spi写入数据时将数据量乘以2，修改后的函数如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ST7735_DrawImage8bit_Img2LCD</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> w<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> h<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> ST7735_WIDTH<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> ST7735_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> ST7735_WIDTH<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">+</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> ST7735_HEIGHT<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    
    <span class="token function">ST7735_Select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ST7735_SetAddressWindow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>w<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span>h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
    <span class="token function">ST7735_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token operator">*</span>w<span class="token operator">*</span>h<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ST7735_Unselect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是烧录测试后LCD显示颜色异常且边缘模糊，初步推测是图片数据原本的问题，考虑到可能2个8位数据合并时高8位与低8位的顺序反了，在MATLAB中进行数组元素两两翻转验证：</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> swappedArray <span class="token operator">=</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>inputArray<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">iscolumn</span><span class="token punctuation">(</span>inputArray<span class="token punctuation">)</span>
        inputArray <span class="token operator">=</span> inputArray<span class="token operator">'</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    n <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>inputArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token function">mod</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token number">0</span>
        <span class="token function">inputArray</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">NaN</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
    swappedArray <span class="token operator">=</span> inputArray<span class="token punctuation">;</span>
    <span class="token function">swappedArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">inputArray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">swappedArray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">inputArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    swappedArray <span class="token operator">=</span> <span class="token function">swappedArray</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">isnan</span><span class="token punctuation">(</span>swappedArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将原始图片数据处理后再进行烧录，发现显示正常，问题定位到数组元素的写入顺序，解决方法较多，这里我直接在函数中将原始数组变换，最终的函数如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ST7735_DrawImage8bit_Img2LCD</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> x<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> y<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> w<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> h<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token class-name">uint8_t</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> ST7735_WIDTH<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> ST7735_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> ST7735_WIDTH<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">+</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> ST7735_HEIGHT<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token comment">/* Swap adjacent elements in the data array	*/</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> w <span class="token operator">*</span> h <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> w <span class="token operator">*</span> h <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	        data<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	    <span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">ST7735_Select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ST7735_SetAddressWindow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>w<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span>h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token function">ST7735_WriteData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token operator">*</span>w<span class="token operator">*</span>h<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ST7735_Unselect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看看显示效果：</p>
<center>
<img src="/images/embeded_sys/LCDTEST.webp" width="400">
</center>
]]></content>
      <categories>
        <category>Learning Record</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>C</tag>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>冈萨雷斯 《数字图像处理》Study Log</title>
    <url>/2025/05/19/250519/</url>
    <content><![CDATA[<h3 id="Ch0-数字图像的概念"><a href="#Ch0-数字图像的概念" class="headerlink" title="Ch0 数字图像的概念"></a><strong>Ch0 数字图像的概念</strong></h3><p>观察系统使用的光波段：可见光、红外、射线、微波、超声波等</p>
<p>视觉在人类获取信息来源中占70%</p>
<p><strong>图：</strong>反射光或者透射光的分布，或物体自身发出的能量—客观</p>
<p><strong>像：</strong>人的视觉系统对图的接收在大脑中形成的印象或认识—主观</p>
<p>图像处理：是对图像信息进行加工处理，以满足人的视觉心理和实际应用的需求。包括光学和电子学两种方法</p>
<h4 id="图像分类：模拟图像-amp-数字图像"><a href="#图像分类：模拟图像-amp-数字图像" class="headerlink" title="图像分类：模拟图像 &amp; 数字图像"></a><strong>图像分类：模拟图像 &amp; 数字图像</strong></h4><ul>
<li><p>模拟图像：理论上不存在，即使高密度胶片成像也无法称为模拟图像，个人认为可将人眼获得的像近似为模拟图像</p>
</li>
<li><p>数字图像：</p>
<p>由连续的模拟图像通过<strong>采样</strong>和<strong>量化</strong>得到。数字图像的基本单位是像素，所以数字图像是像素的集合</p>
<p>数字图像是以像素为元素的矩阵，像素的值代表图像在该位置的亮度/色度，称为图像的灰度值/色度值</p>
<p>数字图像像素具有整数坐标与整数灰度值</p>
</li>
</ul>
<h4 id="数字图像处理的基本特点："><a href="#数字图像处理的基本特点：" class="headerlink" title="数字图像处理的基本特点："></a><strong>数字图像处理的基本特点：</strong></h4><ol>
<li>信息量大</li>
<li>占用频带宽：电视图像的带宽为5~6MHz（细节越多，画质越高带宽越大，不过现代数字编码技术可以通过压缩方法，比如MPEG-4、H.265等方式大幅减少带宽需求），语音的带宽只有4kHz，频带越宽，技术实现难度就越大</li>
</ol>
<h4 id="数字图像处理的基本内容-（部分内容与图形学互为逆过程）"><a href="#数字图像处理的基本内容-（部分内容与图形学互为逆过程）" class="headerlink" title="数字图像处理的基本内容 （部分内容与图形学互为逆过程）"></a><strong>数字图像处理的基本内容 （部分内容与图形学互为逆过程）</strong></h4><ol>
<li>增强：改善质量</li>
<li>几何处理：平移、缩放、旋转、扭曲</li>
<li>复原重建：去噪、去模糊、重建原始图像</li>
<li>编码压缩：减少存储量和传输量</li>
<li>分割：区域分割和理解、目标表达和描述</li>
<li>理解：图像感知、解释、推理</li>
</ol>
<p>应用场景：影视图像处理、医学影像处理、刑侦辅助</p>
<center>
    <img src="/images/dip/lena.webp" width="500">
</center>



<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 id="Ch1-图像技术基础"><a href="#Ch1-图像技术基础" class="headerlink" title="Ch1 图像技术基础"></a><strong>Ch1 图像技术基础</strong></h3><h4 id="图像-amp-像素"><a href="#图像-amp-像素" class="headerlink" title="图像 &amp; 像素"></a>图像 &amp; 像素</h4><p>图像—二维函数f(x,y)，其中x,y是空间坐标【空间上的离散化，即采样】，f(x,y)是该点的幅值【即量化】</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">图像类别</th>
<th style="text-align:center">特征</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">黑白图像</td>
<td style="text-align:center">二值</td>
</tr>
<tr>
<td style="text-align:center">灰度图像</td>
<td style="text-align:center">单分量，f(x,y)表示亮度</td>
</tr>
<tr>
<td style="text-align:center">彩色图像</td>
<td style="text-align:center">多分量，由3个或多个二维灰度函数f(x,y)组成（如RGB,HSV）</td>
</tr>
</tbody>
</table>
</div>
<h4 id="数字化过程"><a href="#数字化过程" class="headerlink" title="数字化过程"></a>数字化过程</h4><ul>
<li>扫描：对一幅图像内给定位置进行寻址，将图像分割为矩形网络，即栅格化，扫描的最小单元为像素</li>
<li>采样：在一幅图像的每个像素位置上测量灰度值，由传感元件将光的亮度转化为电压值</li>
<li>量化：将测量的灰度值用整数来表示（ADC）</li>
</ul>
<center>
    ${f}_{i j}=\left[\begin{array}{cccc}
f_{00} & f_{01} & \cdots & f_{0*(N-1)} \\
f_{10} & f_{11} & \cdots & f_{1*(N-1))} \\
\vdots & \vdots & \cdots & \vdots \\
f_{(N-1)*0} & f_{(N-1)*1} & \cdots & f_{(N-1)*(N-1)}
\end{array}\right] \approx f(x, y)$    
</center>    


<h4 id="像素的属性"><a href="#像素的属性" class="headerlink" title="像素的属性"></a>像素的属性</h4><ul>
<li>大小：与空间分辨率有关，长采样间隔产生低的空间分辨率</li>
<li>灰度：与灰度分辨率有关</li>
<li>位深度：用来存放像素颜色值所用的位数：1/4/8/24（真彩）</li>
<li>灰度级：对应位深度，表示像素明暗程度的整数量，为$2^n$</li>
</ul>
<center>
    <img src="/images/dip/pixel_depth.webp" width="500">
</center>



<h4 id="像素间的基本关系"><a href="#像素间的基本关系" class="headerlink" title="像素间的基本关系"></a>像素间的基本关系</h4><ul>
<li><strong>neighbor 邻域</strong>：4-邻域；D-邻域；8-邻域</li>
</ul>
<center>
    <img src="/images/dip/pixel_neighbor.webp" width="500">
</center>



<ul>
<li><strong>adjacency 连接性</strong></li>
</ul>
<p>​    两个像素连接的两个必要条件：</p>
<ol>
<li><p>两个像素的位置邻接（按上述neighbor种类可划分为 4-连接、8-连接，以及m-连接）</p>
</li>
<li><p>两个像素的灰度值满足特定的相似性准则（值要在某一范围内近似相等）</p>
<p><em>特殊情况：<em>*m-连接</em></em>，包括两种情况（视觉上看不允许有三角阶梯形的连接图案）</p>
<ol>
<li>4-连接</li>
<li>像素A∈像素B的D-邻域，且两个像素的4-邻域不包含同样值的像素</li>
</ol>
</li>
</ol>
<ul>
<li><p><strong>距离</strong>（像素A到像素B的路径，是不同像素的序列）可用定义连接的方法定义路径，其中m-连接所得的m-路径更适用于边缘提取。</p>
</li>
<li><p><strong>connection 像素在图像子集中连通</strong></p>
<p>两个像素在图像中能有一条完全由像素组成的路径，则两个像素连通，连接是连通的一种特殊情况</p>
</li>
<li><p><strong>connected component 连通成分</strong></p>
<p>对于图像中的任意像素A，图像中所有<strong>连接</strong>到A的像素的集合被称为图像的连通成分，同样可按连接方式划分</p>
</li>
</ul>
<h4 id="像素间的距离"><a href="#像素间的距离" class="headerlink" title="像素间的距离"></a><strong>像素间的距离</strong></h4><ul>
<li><strong>欧几里得距离</strong></li>
</ul>
<p>p与q之间的欧几里得距离定义为：</p>
<center>
    $De(p,q) = [(x-s)^2 + (y-t)^2]^{(1/2)}$
</center>



<p>对于图像来说计算量太大，一般不用。</p>
<ul>
<li><strong>D4距离/街区距离/城市距离</strong></li>
</ul>
<center>
    $D4(p,q) = |x-s| + |y-t|$
</center>


<p>区别于欧几里得距离（到某像素距离等于某个值的像素形成一个圆形），到某像素D4距离小于等于某个值的像素形成一个菱形</p>
<center>
    <img src="/images/dip/D4.webp" width="200">
</center>



<ul>
<li><strong>D8距离/棋盘距离</strong>：用于边缘提取时设置距离的阈值</li>
</ul>
<center>
    $D8(p,q) =max(|x-s| , |y-t|) $
</center>


<p>如下图所示：</p>
<center>
    <img src="/images/dip/D8.webp" width="200">
</center>



<h4 id="印刷品中的半调输出技术"><a href="#印刷品中的半调输出技术" class="headerlink" title="印刷品中的半调输出技术"></a><strong>印刷品中的半调输出技术</strong></h4><ul>
<li><strong>节选自维基百科：半色调</strong>（Halftone）是指为了模拟出连续调影像（色阶）的视觉感觉，一般用墨点（半色调网点）的大小或频率的改变，来模拟明暗的变化。半色调技术是传统印刷中用来处理阶调并模拟连续调（continue tone）的方法，通常也称为过网（screening）技术。半色调是相对于连续调表示阶调的一种方法，一般我们所看到银盐相片上的影像是由连续的层次所构成，像这样的影像称之为连续调影像。相对而言，印刷机或打印机上所打印的图像，只能借由着墨或不着墨两种阶调来表现层次，像这样的两值化影像称为半色调影像。只要借由调整不同形式、不同大小的墨点，利用人眼可以将图像中邻近墨点进行视觉积分的原理，在一定的距离观察下，便可以使二值化影像重现连续调的感觉。也就是说，当这些墨点越小时，二值化影像就可以在越短的观测距离下，被人眼观测积分成近似连续调的影像。</li>
</ul>
<center>
    <img src="/images/dip/halftone.webp" width="200">
</center>



<h4 id="图像坐标变换"><a href="#图像坐标变换" class="headerlink" title="图像坐标变换"></a><strong>图像坐标变换</strong></h4><p>可借助矩阵写为</p>
<center>
    $\boldsymbol{v}^{\prime}=\boldsymbol{A} \boldsymbol{v}$
</center>


<p>其中A为变换矩阵，v‘为变换后的坐标矢量，v为变换前的坐标矢量</p>
<p><strong>平移变换</strong></p>
<center>
    $\boldsymbol{T}=\left[\begin{array}{ccc}
1 & 0 & x_{0} \\
0 & 1 & y_{0} \\
0 & 0 & 1
\end{array}\right]$
</center>


<p><strong>尺度变换</strong></p>
<center>
    $\boldsymbol{S}=\left[\begin{array}{ccc}
S_{x} & 0 & 0 \\
0 & S_{y} & 0 \\
0 & 0 & 1
\end{array}\right]$
</center>


<p><strong>旋转变换</strong></p>
<center>
    $\boldsymbol{R}=\left[\begin{array}{ccc}
\cos \gamma & \sin \gamma & 0 \\
-\sin \gamma & \cos \gamma & 0 \\
0 & 0 & 1
\end{array}\right]$
</center>




<h4 id="图像的质量"><a href="#图像的质量" class="headerlink" title="图像的质量"></a><strong>图像的质量</strong></h4><p>清晰度：亮度，对比度，主题内容的大小，细微层次，颜色饱和度</p>
<p>对比度 = 最大亮度 / 最小亮度</p>
<h4 id="图像储存的数据结构"><a href="#图像储存的数据结构" class="headerlink" title="图像储存的数据结构"></a><strong>图像储存的数据结构</strong></h4><ol>
<li>一维数组，行列储存</li>
<li>多波段储存</li>
</ol>
<h4 id="图像文件格式"><a href="#图像文件格式" class="headerlink" title="图像文件格式"></a><strong>图像文件格式</strong></h4><p>BMP, GIF, TIFF, JPEG等</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4 id="光盘读取原理"><a href="#光盘读取原理" class="headerlink" title="*光盘读取原理"></a>*光盘读取原理</h4><p>无论是CD光盘还是DVD光盘，其存储方式与磁盘一样，都是以二进制数据的形式来存储信息。要在这些光盘上存储数据，需要借助激光把二进制数据刻在扁平、具有反射能力的盘片上。为了识别数据，定义激光刻出的小坑就代表二进制的“1”，而空白处则代表二进制的“0”。（凹坑和平坦区域的 <strong>边缘变化</strong>【如从凹坑到平坦，或反之】代表”1”，无变化代表”0”）DVD的记录凹坑比CD小，且螺旋存储凹坑之间的距离也更小。</p>
<p>CD光驱或DVD光驱的主要部分就是激光发生器和光监测器。激光发生器（激光二极管），可以产生对应波长的激光光束，然后经过一系列的处理后照到光盘上。经由光监测器捕捉反射信号而识别实际的数据。然后计算机将这些二进制代码转换成为原来的数据或程序。当光盘在光驱中作高速旋转，激光头在电机的控制下作径向移动，数据就这样源源不断地读取出来。</p>
<p>根据数据密度的差别可分为CD, DVD, BD等。</p>
<center>
    <img src="/images/dip/DVD.webp" width="600">
</center>


<p>光盘与机械硬盘的工作原理区别可见以下博客：</p>
<p><a href="https://zhuanlan.zhihu.com/p/51572176">https://zhuanlan.zhihu.com/p/51572176</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 id="Ch2-空间域图像增强"><a href="#Ch2-空间域图像增强" class="headerlink" title="Ch2 空间域图像增强"></a><strong>Ch2 空间域图像增强</strong></h3><p>定义：直接作用于像素的增强方法，根据具体操作是在像素点位置上还是像素点的邻域上可分为<strong>点操作</strong>和<strong>模板操作（邻域操作）</strong></p>
<h4 id="灰度映射"><a href="#灰度映射" class="headerlink" title="灰度映射"></a>灰度映射</h4><p>通过映射函数:$ t= T(s)$（可根据增强的目的来设计映射函数）将原始图像中的每个像素的灰度都映射到新的灰度。</p>
<h5 id="图像求反（负片）"><a href="#图像求反（负片）" class="headerlink" title="图像求反（负片）"></a>图像求反（负片）</h5><p>一一对应</p>
<center>
    <img src="/images/dip/dip2_1.webp" , width="200">
</center>




<h5 id="幂次变换"><a href="#幂次变换" class="headerlink" title="幂次变换"></a>幂次变换</h5><p>$t= cs^{γ}$ </p>
<p>$γ&lt;1$时在正比函数上方，使得图像变亮，把输入窄带<strong>暗值</strong>映射到宽带输出；</p>
<p>$γ&gt;1$时在正比函数下方，使得图像变暗，把输入窄带<strong>亮值</strong>映射到宽带输出。</p>
<center>
    <img src="/images/dip/dip2_2.webp" , width="200">
</center>


<h5 id="动态范围压缩"><a href="#动态范围压缩" class="headerlink" title="动态范围压缩"></a>动态范围压缩</h5><p>由于某些设备的局限性，采用动态范围压缩，目标与增强图片的对比度相反（同等范围的原始灰度级数变换后范围变化减小）</p>
<center>
    <img src="/images/dip/dip2_3.webp" , width="200">
</center>


<h5 id="阶梯量化"><a href="#阶梯量化" class="headerlink" title="阶梯量化"></a>阶梯量化</h5><p>将图像灰度分范围量化，变成数据量较少的级数，获得数据量压缩的效果（有点像素化风格）</p>
<center>
    <img src="/images/dip/dip2_4.webp" , width="200">
</center>


<h5 id="灰度切分-阈值切分"><a href="#灰度切分-阈值切分" class="headerlink" title="灰度切分/阈值切分"></a>灰度切分/阈值切分</h5><p>只留下两个灰度值，获得最大的对比度以及最少的细节</p>
<center>
    <img src="/images/dip/dip2_5.webp" , width="200">
</center>


<p>*分段变换：</p>
<center>
    <img src="/images/dip/dip2_6.webp" , width="500">
</center>


<h5 id="位平面切片"><a href="#位平面切片" class="headerlink" title="位平面切片"></a>位平面切片</h5><p>以256灰度级图像为例，该图像的灰度级可以用8位表示。可假设图像是由8个1位平面组成，即位平面0~7，其中位平面0包含图像中像素的最低位，位平面7包含像素的最高位。</p>
<p>较高位(前4位)包含大多数视觉重要数据。较低位(后4位)包含对微小细节重要的数据，位平面切片可以分析每一位在图像中的相对重要性。</p>
<p>&nbsp;</p>
<h4 id="图像运算（逐像素进行）"><a href="#图像运算（逐像素进行）" class="headerlink" title="图像运算（逐像素进行）"></a>图像运算（逐像素进行）</h4><h5 id="算术运算（一般用于灰度图像）"><a href="#算术运算（一般用于灰度图像）" class="headerlink" title="算术运算（一般用于灰度图像）"></a>算术运算（一般用于灰度图像）</h5><h5 id="代数运算"><a href="#代数运算" class="headerlink" title="代数运算"></a>代数运算</h5><p>加法：$C(x,y) = A(x,y) + B(x,y)$</p>
<p>应用场景：1.    去除叠加性噪声（图像均值化将降低噪声的影响）2.    生成图像叠加效果</p>
<p>减法：$C(x,y) = A(x,y) - B(x,y)$</p>
<p>应用场景：1.    显示两幅图之间的差异，如视频中的镜头边界的检测 2.    去除不需要的叠加性图案（gb\bb剪辑） 3.    图像分割</p>
<p>乘法：$C(x,y) = A(x,y) * B(x,y)$</p>
<p>应用场景：局部显示——用二值蒙版图像与原图像做乘法</p>
<center>
    <img src="/images/dip/dip2_7.webp" , width="400">
</center>


<h5 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h5><p>与、或、异或、非</p>
<p>部分运算方法与加减法有类似的地方</p>
<p>非：$g(x,y) = 255 - f(x,y)$ 可获得一个负片图像（补图像）</p>
<p>*负片： 灰度图像公式如上；RGB图像需要分别进行非运算；非线性色域需要先进行线性校正后再对不同通道分别校正</p>
<p>与：$g(x,y) = h(x,y)  ∧  f(x,y)$  ；或：$g(x,y) = h(x,y) Ｖ f(x,y)$</p>
<p>可以提取相交子图或合并子图像</p>
<p>&nbsp;</p>
<h4 id="直方图变换"><a href="#直方图变换" class="headerlink" title="直方图变换"></a>直方图变换</h4><p>灰度直方图是关于灰度级的离散函数，描述图像中各灰度级的像素个数，一般归一化后描述</p>
<p>直方图只能反映图像的灰度分布情况，不能反映图像像素的位置</p>
<p>一幅图对应唯一的灰度直方图</p>
<p>*高对比度的图像有更平坦的直方图，对于图像分割，识别领域，一幅图像应该利用全部或者几乎全部可能的灰度级</p>
<p>应用：</p>
<ul>
<li><p>利用直方图分布进行阈值分割，如果某灰度图像的灰度直方图有两个明显的尖峰，取两个尖峰之间的谷点作为分割点，可以得到较好的二值处理的效果</p>
</li>
<li><p>直方图均衡化，通过将<strong>像素个数多的灰度级进行展宽，对像素个数少的灰度级进行缩减</strong>，将原始图像的直方图变为均衡分布的形式，由于各灰度之间有均匀的概率分布，图像看起来可以更清晰</p>
</li>
</ul>
<h5 id="直方图均衡化方法："><a href="#直方图均衡化方法：" class="headerlink" title="*直方图均衡化方法："></a>*直方图均衡化方法：</h5><p> 为使得图像的直方图均衡化，同时保持灰度值的单调性和范围不变，构造的灰度变换函数$ t= T(s)$需要满足以下两个条件：</p>
<ol>
<li><p>$T(s)$是单调递增函数，且$0≤T(s)≤1$：保证变换后的灰度值保持从黑到白的变换顺序，避免灰度值反转，保证变换后的灰度值在0~1的范围内（归一化后）</p>
<p>原始图像的累积分布函数(CDF，即概率密度曲线包围的面积)可满足以上条件</p>
<center>
    $t = T(s) = \int_{0}^{s}p(w)dw,  p(w)是概率值$
</center>
</li>
<li><p>$T^{-1}(s)$存在且单调递增，允许均衡化后的灰度值t反向映射回原始灰度值，反函数单调递增可以保证反向映射时仍然保持灰度顺序不变，避免引入新的非线性失真</p>
<p>$T(s)$是CDF，其反函数可以通过查找或者数值方式求得</p>
</li>
</ol>
<p><strong>因为数字图像处理是离散化的，因此需要对上述方法离散化：</strong></p>
<p>设一幅图像的像素总数为n，分L个灰度级，其中第k个灰度级出现的概率为$p(s_{k}) = n_{k}/n$，其中$0≤s_k≤1,k = 0,1,2,…L-1$. 变换函数，即离散CDF为$T(s_k) = \sum_{j=0}^{k} p(s_{k}) = \sum_{j=0}^{k} n_j/n$</p>
<p>算法步骤：</p>
<ul>
<li><font color="Blue">计算每个灰度级的像素个数在整个图像中所占的概率</font>
</li>
<li><font color="Blue">计算每个灰度级的离散CDF</font>
</li>
<li><font color="Blue">根据变换后的$t_{k}$的值判断变换后的灰度级（区间拟合，比如round()）</font>

</li>
</ul>
<p>拟合后会合并部分灰度级，宏观上对灰度级分布均衡化，微观上不可能拉平，灰度级层次减少，对比度提高</p>
<p>这种方法使得原本集中在狭窄区间的像素值变换到更广的范围内，增加了像素灰度值的<strong>有效</strong>动态范围</p>
<p>优点：自动得到近似均匀分布的直方图，但由于变换函数采用CDF，只能近似，因此在一些有特定需求的场景下采用<strong>直方图规定化方法</strong></p>
<p>&nbsp;</p>
<h5 id="直方图规定化方法："><a href="#直方图规定化方法：" class="headerlink" title="*直方图规定化方法："></a>*直方图规定化方法：</h5><p>将原始直方图转换为期望直方图</p>
<p>算法步骤：</p>
<ul>
<li><font color="Blue">对原始图像进行灰度均衡化（按照上述直方图均衡化方法）</font>
</li>
<li><font color="Blue">计算目标直方图的离散CDF</font>
</li>
<li><font color="Blue">将原始直方图映射到目标直方图</font>

</li>
</ul>
<p>映射规则：</p>
<p>单映射规则（灰度级一一对应） &amp;  组映射规则（灰度级分组后平均后对应，效果好）</p>
<p>&nbsp;</p>
<h5 id="镜头边界的检测"><a href="#镜头边界的检测" class="headerlink" title="镜头边界的检测"></a>镜头边界的检测</h5><p>定义：一个镜头指一系列连续记录的图像帧，用于表示一个时间段或者相同地点连续的动作</p>
<p>镜头边界的检测即检测由镜头切换而产生的关键帧</p>
<p>方法：</p>
<ul>
<li>两幅图图像相减（检测像素变化的数目是否超过阈值）可通过滤波降低对摄像机运动敏感的问题影响</li>
<li>连续帧的直方图相减（统计相邻两帧中所有像素在不同灰度上的分布差异之和是否超过阈值）对目标的空间变化不敏感</li>
<li>时空切片分析（颜色和纹理的不连续）</li>
</ul>
<p>&nbsp;</p>
<h4 id="图像空间平滑滤波增强"><a href="#图像空间平滑滤波增强" class="headerlink" title="图像空间平滑滤波增强"></a>图像空间平滑滤波增强</h4><h5 id="图像中的噪声"><a href="#图像中的噪声" class="headerlink" title="图像中的噪声"></a>图像中的噪声</h5><p><strong>引起原因：</strong>敏感元器件的内部噪声，传输通道的干扰以及量化噪声</p>
<p><strong>噪声分类：</strong></p>
<ul>
<li>加性噪声：与图像信号无关。信道噪声、扫描时产生的噪声</li>
<li>乘性噪声：某像素处的噪声只与该像素处的图像信号有关（或者与其邻域信号也有关）</li>
<li>根据噪声的分布特性可以分为：椒盐噪声（泊松噪声）、高斯噪声、颗粒噪声等</li>
</ul>
<h5 id="邻域平均线性滤波（均值滤波）"><a href="#邻域平均线性滤波（均值滤波）" class="headerlink" title="邻域平均线性滤波（均值滤波）"></a>邻域平均线性滤波（均值滤波）</h5><ul>
<li>思想：将一个像素及其邻域内的所有像素的平均灰度值赋给平滑图像中对应的像素，从而达到平滑的目的</li>
</ul>
<p>常用的邻域有4-邻域和8-邻域</p>
<ul>
<li>作用：减噪，去除不相干的细节，对灰度级不足引起的伪轮廓进行平滑</li>
</ul>
<p>example：非加权3*3邻域均值滤波器模板</p>
<center>
    $H_{0}=\frac{1}{9}\left[\begin{array}{ccc}
1 & 1 & 1 \\
1 & 1 & 1 \\
1 & 1 & 1
\end{array}\right]$
</center>


<p>加权3*3均值滤波器模板</p>
<center>
    $H_{0}=\frac{1}{10}\left[\begin{array}{ccc}
1 & 1 & 1 \\
1 & 2 & 1 \\
1 & 1 & 1
\end{array}\right]$
</center>


<p>中心像素为待处理像素</p>
<p>那么可知道，当像素处于图像边缘时，这个滤波器有一部分是没有值对应的，此时有两种方法进行补充：</p>
<ol>
<li>镜像反射</li>
<li>补0</li>
</ol>
<p><strong>邻域平均法算法步骤：</strong></p>
<ul>
<li><font color="Blue">确定mask大小</font>
</li>
<li><font color="Blue">对待处理的图像边缘进行扩充</font>
</li>
<li><font color="Blue">将mask在图像中游走，计算平均</font>
</li>
<li><font color="Blue">用均值代替中心像素值</font>

</li>
</ul>
<p>*模板越大，对图像的模糊作用就越强，但也可以在提取较大目标之前先去除太小的细节或噪声</p>
<p>*加权邻域平均可以一定程度上缓解非加权滤波导致的边缘模糊的问题，其中心元素占的比例越小，越平滑，图像越模糊</p>
<p>&nbsp;</p>
<h5 id="中值滤波法"><a href="#中值滤波法" class="headerlink" title="中值滤波法"></a>中值滤波法</h5><p>虽然邻域平均法可以平滑图像，但在消除噪声的同时，会使得图像中的一些细节变得模糊。中值滤波则在消除噪声的同时还能保持图像中的细节部分。</p>
<ul>
<li>思想：对模板内的像素进行大小顺序排列，如此最亮的和最暗的点会排在两侧，用中间位置像素值代替原灰度值</li>
<li>作用：消除噪声，保留图像细节，防止边缘模糊。对脉冲噪声和椒盐噪声的抑制效果好</li>
</ul>
<p><strong>中值滤波算法步骤：</strong></p>
<ul>
<li><font color="Blue">确定mask大小与形状</font>
</li>
<li><font color="Blue">对待处理的图像边缘进行扩充</font>
</li>
<li><font color="Blue">将mask在图像中游走，对模板内像素值进行排序</font>
</li>
<li><font color="Blue">用中间值代替中心像素值</font>

</li>
</ul>
<p>mask形状一般有方形与十字形</p>
<p>注：</p>
<ul>
<li>有尖顶角几何结构的图像，一般采用十字窗，大小不超过最小有效物体的尺寸</li>
<li>有较多的点、线细节的结构，一般不用中值滤波</li>
<li>由中值滤波推广到统计排序滤波器：最大值滤波器（寻找最亮点）&amp; 最小值滤波器（寻找最暗点）</li>
</ul>
<p>&nbsp;</p>
<h4 id="空间域滤波推广"><a href="#空间域滤波推广" class="headerlink" title="空间域滤波推广"></a><strong>空间域滤波推广</strong></h4><ul>
<li><strong>钝化滤波器-平滑滤波器</strong>：低通滤波 &amp; 中值滤波</li>
<li><strong>锐化滤波器</strong>：高通滤波 &amp; 微分滤波 &amp; 高增益滤波</li>
</ul>
<h5 id="基本低通滤波器设计原则："><a href="#基本低通滤波器设计原则：" class="headerlink" title="基本低通滤波器设计原则："></a>基本低通滤波器设计原则：</h5><p>如同邻域平均法，模板系数需大于0，都选1或者中间选1，周围选0.5</p>
<center>
    <img src="/images/dip/dip2_8.webp" , width="400">
</center>

<p><strong>图像锐化：</strong></p>
<p>补偿图像的轮廓，突出图像中物体的边缘或细节，使得图像更为清晰</p>
<ul>
<li>思想：图像模糊的原因——图像被平均或积分，因此为实现图像的锐化，需要进行反运算“微分”——&gt;以此增强高频分量，使图像边缘变得清晰，但同时也增强了噪声</li>
<li>条件：原始图像信噪比质量要高</li>
<li>边缘检测原理：图像中物体边缘是灰度值发生突变的地方，常用差分或者梯度计算来检测边缘</li>
</ul>
<p><strong>基本高通滤波设计原则：</strong></p>
<p>1)系数中心为正值，外周为负值 2)滤波器各系数之和为0</p>
<center>
    <img src="/images/dip/dip2_9.webp" , width="400">
</center>


<p>注：</p>
<ul>
<li>计算时会出现负值，常用归0处理</li>
<li>像素值相同或者变化平缓的区域，结果为0或者很小，图像亮度降低</li>
</ul>
<p><strong>微分滤波器</strong></p>
<p>引入微分算子的概念</p>
<p>已知：一阶偏导数没有各向同性</p>
<center>
    $\frac{\partial f}{\partial x} ≠ \frac{\partial f}{\partial y}$
</center>


<p>而数学上可以证明：<strong>偏导数的平方和是各向同性的</strong>，因此梯度运算、拉普拉斯运算都符合与方向无关性。即：无论边界是什么走向，只要幅度相同，算子的输出就相同。</p>
<p><strong>梯度法：</strong> $G[f(x,y)] = [\frac{\partial f}{\partial x} \frac{\partial f}{\partial y}]^{T}$ </p>
<p>梯度的方向是$f(x,y)$变化率最大的方向</p>
<p>梯度的偏导数可以用该处偏导数的平方和开根号表示。</p>
<p>对于数字图像，显然是要用差分来代替微分的</p>
<center>
    <img src="/images/dip/dip2_10.webp" , width="400">
</center>



<p>同时用<strong>绝对值</strong>来近似<strong>平方和</strong>的表达</p>
<p>如上图所示两种方法，第一种是用4-邻域进行近似，第二种是交叉差(Roberts梯度法)</p>
<h5 id="微分滤波器模板系数设计"><a href="#微分滤波器模板系数设计" class="headerlink" title="微分滤波器模板系数设计"></a>微分滤波器模板系数设计</h5><ul>
<li>Roberts交叉梯度算子</li>
</ul>
  <center>
      $H_{0}=\left[\begin{array}{ccc}
  1 & 0  \\
  0 & -1 
  \end{array}\right],
      H_{1}=\left[\begin{array}{ccc}
  0 & 1  \\
  -1 & 0 
  \end{array}\right]$
  </center>

<ul>
<li><p>Prewitt梯度算子</p>
<center>
    $H_{0}=\left[\begin{array}{ccc}
-1 & -1 & -1  \\
0 & 0 & 0 \\
1 & 1 & 1
\end{array}\right],
    H_{1}=\left[\begin{array}{ccc}
-1 & 0 & 1  \\
-1 & 0 & 1 \\
-1 & 0 & 1
\end{array}\right]$
</center>
</li>
<li><p>Sobel梯度算子：有一定的平滑作用</p>
<center>
    $H_{0}=\left[\begin{array}{ccc}
-1 & -2 & -1  \\
0 & 0 & 0 \\
1 & 2 & 1
\end{array}\right],
    H_{1}=\left[\begin{array}{ccc}
-1 & 0 & 1  \\
-2 & 0 & 2 \\
-1 & 0 & 1
\end{array}\right]$
</center>
</li>
<li><p>Scharr梯度算子：更加精确</p>
<center>
    $H_{0}=\left[\begin{array}{ccc}
-3 & -10 & -3  \\
0 & 0 & 0 \\
3 & 10 & 3
\end{array}\right],
    H_{1}=\left[\begin{array}{ccc}
-3 & 0 & 3  \\
-10 & 0 & 10 \\
-3 & 0 & 3
\end{array}\right]$
</center>

</li>
</ul>
<p>所有锐化算子的系数之和为0</p>
<p>拉普拉斯算子：求二阶微分，适用于改善因为光线的漫反射造成的图像模糊</p>
<font color="Blue">应用</font>

<font color="Blue">经过梯度算子计算后的值：</font>

<ol>
<li><font color="Blue">若梯度大于25，则给原像素赋最大值255，否则赋原值——边增强且背景保留</font></li>
<li><font color="Blue">若梯度大于25，则给原像素赋最大值255，否则赋0——边增强且图像二值化</font>

</li>
</ol>
<p>&nbsp;</p>
<h5 id="高增益滤波"><a href="#高增益滤波" class="headerlink" title="高增益滤波"></a>高增益滤波</h5><p>思想：弥补高通滤波的缺陷，在增强边缘和细节的同时，不丢失原图像的低频成分，即增加一部分原图像到高通之中，算子可在高通基础上增益</p>
<p><strong>高通 = 原图 - 低通</strong></p>
<p><strong>高增益  = A原图 - 低通</strong></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 id="Ch3-频域图像增强"><a href="#Ch3-频域图像增强" class="headerlink" title="Ch3 频域图像增强"></a><strong>Ch3 频域图像增强</strong></h3><h4 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a><strong>理论基础</strong></h4><p>空间域图像变换到频域的具体实现——<strong>图像离散傅里叶变换与反变换</strong></p>
<p>频域图像的表达特点——<strong>经过中心变换后，低频位于中心，高频在外</strong></p>
<p>空间频率的定义：图像灰度值随空间坐标变化的快慢也可以用频率来度量，称为<strong>空间频率</strong></p>
<h5 id="二维卷积"><a href="#二维卷积" class="headerlink" title="二维卷积"></a>二维卷积</h5><p>对于二维平面函数，二维卷积定义：</p>
<center>
    $ h(x, y)=f^{*} g=\int_{-\infty}^{\infty}\int_{-\infty}^{\infty} f(u, v) g(x-u, y-v) d u d v $
</center>


<p><strong>*注：</strong></p>
<p>深度学习中，CNN中的<font color="red">卷积</font>其实是“互相关运算”，即kernel不翻转，与上面的二维卷积定义无法完全对应。</p>
<p>在数字图像中，需要离散化，离散二维卷积：</p>
<center>
    $ h(x, y)=f^{*} g=\sum_{m} \sum_{n} f(m, n) g(x-m, y-n) $
</center>


<h5 id="二维离散傅里叶变换"><a href="#二维离散傅里叶变换" class="headerlink" title="二维离散傅里叶变换"></a>二维离散傅里叶变换</h5><p>\begin{array}{l}<br>F(u, v)=\frac{1}{M N} \sum_{x=0}^{M-1} \sum_{y=0}^{N-1} f(x, y) \mathrm{e}^{[-\mathrm{j} 2 \pi(u x / M+v y / N)]} \\<br>f(x, y)=\sum_{u=0}^{M-1} \sum_{v=0}^{N-1} F(u, v) \mathrm{e}^{[\mathrm{j} 2 \pi(u x / M+v y / N)]}<br>\end{array}</p>
<p>M，N表示图像在x，y方向上的大小</p>
<h5 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a><strong>基本性质</strong></h5><ul>
<li><p><strong>可分离性：</strong>可以将二维DFT转换成一维计算，先做一个方向上的：</p>
<p>\begin{aligned}<br>F(u, v) &amp; =\frac{1}{N^{2}} \sum_{x=0}^{N-1} \mathrm{e}^{-\mathrm{j} 2 \pi u x / N} \bullet \sum_{y=0}^{N-1} f(x, y) \mathrm{e}^{-\mathrm{j} 2 \pi v y / N} \\<br>f(x, y) &amp; =\sum_{u=0}^{N-1} \mathrm{e}^{-\mathrm{j} 2 \pi u x / N} \bullet \sum_{v=0}^{N-1} F(u, v) \mathrm{e}^{-\mathrm{j} 2 \pi v y / N}<br>\end{aligned}</p>
<p>再做第二个方向上的：</p>
<p>\begin{array}{l}<br>F(u, v)=F_{x}\left\{F_{y}[f(x, y)]\right\}=F_{y}\left\{F_{x}[f(x, y)]\right\} \\<br>f(x, y)=F_{u}^{-1}\left\{F_{v}^{-1}[F(u, v)]\right\}=F_{v}^{-1}\left\{F_{u}^{-1}[F(u, v)]\right\} \\<br>F(u, v)=\frac{1}{N} \sum_{x=0}^{N-1} F(x, v) \mathrm{e}^{-\mathrm{j} 2 \pi u x / N} \\<br>\text { 其中: } F(x, v)=N\left[\frac{1}{N} \sum_{y=0}^{N-1} f(x, y) \mathrm{e}^{-\mathrm{j} 2 \pi v x / N}\right]<br>\end{array}</p>
</li>
<li><p><strong>平移性</strong>——&gt;图像中心化</p>
<p>\begin{aligned}<br>f(x, y) e^{j 2 \pi\left(\frac{u_{0} x}{M}+\frac{v_{0} y}{N}\right)} &amp; \Leftrightarrow F\left(u-u_{0}, v-v_{0}\right) \\<br>f\left(x-x_{0}, y-y_{0}\right) &amp; \Leftrightarrow F(u, v) e^{-j 2 \pi\left(\frac{u x_{0}}{M}+\frac{v y_{0}}{N}\right)}<br>\end{aligned}</p>
<p>第一个公式表明，将f(x,y)与一个指数项相乘就相当于把其变换后的频域中心移动到新的位置。</p>
<p>第二个公式表明，将F(u,v)与一个指数项相乘，相当于把其变换后的空间域中心移动到新的位置。</p>
<p>同时可以看出，对f(x,y)的平移不会影响其傅里叶变换的幅值，将u0 = M/2 和 v0 = N/2代入公式，指数部分就变成：$e^{j 2 \pi\left(\frac{u_{0} x}{M}+\frac{\nu_{0} y}{N}\right)}=e^{j \pi(x+y)}=(-1)^{(x+y)} $</p>
<p>代入上面的公式有：</p>
<p>\begin{array}{ll}<br>f(x, y)(-1)^{(x+y)} &amp; \Leftrightarrow F(u-M / 2, v-N / 2) \\<br>f(x-M / 2, y-N / 2) &amp; \Leftrightarrow F(u, v)(-1)^{(u+v)}<br>\end{array}</p>
<p>因此有结论，对数字图像的每一个像素点的取值直接乘上$(-1)^{x+y}$，之后在做傅里叶变换，可以得到中心化后的频域图。这和在频域移动M/2和N/2是一样的效果。 </p>
<center>
    <img src="/images/dip/dip3_1.webp" , width="400">
</center>


</li>
</ul>
<ul>
<li><p><strong>周期性：</strong>DFT和他的逆变换是以M，N为周期的</p>
</li>
<li><p><strong>共轭对称性</strong></p>
</li>
<li><p><strong>旋转不变性</strong></p>
</li>
<li><p><strong>加法有分配性，乘法有比例性</strong></p>
</li>
<li><p><strong>平均值：</strong>将$u = v = 0$代入二维DFT公式，可得原图像均值就是该DFT在$(0,0)$处的值</p>
</li>
</ul>
<h5 id="DFT的问题"><a href="#DFT的问题" class="headerlink" title="DFT的问题"></a>DFT的问题</h5><p>计算量大，收敛慢</p>
<p>引入<strong>FFT</strong>：对于任何N = 2m的DFT，通过计算两个N/2的DFT，来计算N的DFT</p>
<p>有按位倒序排列等方法</p>
<p><strong>小结：</strong>二维离散傅里叶变换在图像处理中是一个比较基本的数学工具，利用这个工具，可以对图像的频谱进行各种各样的处理，比如滤波、降噪、增强等。</p>
<p>除离散傅里叶变换之外，还有沃尔什和哈达玛变换这两种重要的正交变换，他们将信号从时域或者空间域转换到一种由二进制函数(如矩形波)构成的频域，类似于傅里叶变换，但计算更加高效(只涉及加减运算，无需复数运算)</p>
<p>&nbsp;</p>
<h4 id="频域图像增强"><a href="#频域图像增强" class="headerlink" title="频域图像增强"></a>频域图像增强</h4><p>有了二维离散傅里叶变换的基础，下面可以考虑具体的应用了</p>
<h5 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h5><p>有被处理图像f(x,y)， 变换函数h(x,y)，以及最终的目标图像g(x,y)</p>
<ul>
<li><font color="blue">首先对上述原始图像进行线性位置操作，比如利用DFT的平移性质进行图像中心化</font>
</li>
<li><font color="blue">然后根据自己的需求确定变换函数</font>
</li>
<li><font color="blue">空间域的卷积等于频域的乘积</font>

<font color="blue">$g(x,y) = h(x,y)* f(x,y),G(u,v) = H(u,v)F(u,v)$</font>
</li>
<li><font color="blue">最后对目标图像的傅里叶变换进行傅里叶反变换</font><font color="green">(也利用平移性质，具体可见上一小节的公式)</font><font color="blue">，即可得到目标图像的空间域信号</font>



</li>
</ul>
<center>
    <img src="/images/dip/dip3_2.webp" , width="600">
</center>




<h5 id="频域平面与图像空域特性的关系"><a href="#频域平面与图像空域特性的关系" class="headerlink" title="频域平面与图像空域特性的关系"></a>频域平面与图像空域特性的关系</h5><ul>
<li>图像变化平缓的部分(低频区域)靠近频率平面的圆心</li>
<li>图像中边界，噪声，变化陡峭的部分，以放射方向离开频率平面的圆心，称为高频区域</li>
</ul>
<h5 id="滤波器"><a href="#滤波器" class="headerlink" title="滤波器"></a>滤波器</h5><h6 id="理想低通滤波器的定义"><a href="#理想低通滤波器的定义" class="headerlink" title="理想低通滤波器的定义"></a>理想低通滤波器的定义</h6><center>
    $H(u, v)=\left\{\begin{array}{ll}
1 & \operatorname{,D}(u, v) \leq D_{0} \\
0 & \operatorname{,D}(u, v)>D_{0}
\end{array}\right.$
</center>


<p>其中，D0为截止频率在频率平面内到原点的距离，D(u,v)为距离函数$D(u,v) = (u^2+v^2)^{\frac{1}{2}}$<br>不过因为是在频域，说是距离有些问题，应该可以把这个说成是水平空间频率u和垂直空间频率v组成的向量的模</p>
<h6 id="理想低通滤波器的分析"><a href="#理想低通滤波器的分析" class="headerlink" title="理想低通滤波器的分析"></a>理想低通滤波器的分析</h6><ul>
<li>整个能量的90%都被一个很小的小圆周包含，大部分尖锐的细节信息都存在于被去掉的10%的能量中</li>
<li>被钝化的图像有一种非常严重的振铃效果</li>
</ul>
<h6 id="Butterworth低通滤波器"><a href="#Butterworth低通滤波器" class="headerlink" title="Butterworth低通滤波器"></a>Butterworth低通滤波器</h6><p>定义：一个截止频率在与原点距离为D0的n阶butterworth滤波器的变换函数如下：</p>
<center>
    $H(u, v)=\frac{1}{1+\left[D(u, v) / D_{0}\right]^{2 n}}$
</center>


<p>其中，D0为截止频率在频率平面内到原点的距离，D(u,v)为距离函数$D(u,v) = (u^2+v^2)^{\frac{1}{2}}$</p>
<p>与理想低通滤波器的区别是，巴特沃斯低通滤波器在通带与被滤除的频率之间没有明显的截断，可以缓解振铃效果</p>
<p>在某些文献中，巴特沃斯滤波器的传递函数可能是指数形式，例如：</p>
<center>
    $H(u, v)=e^{-\left(\frac{D(u, v)}{D_{0}}\right)^{2 n}}$
</center>


<p>这是因为在x较大时，两种传递函数的主体部分衰减的趋势相似，且指数形式在某些情况下计算更为方便。</p>
<p>这时可以把巴特沃斯滤波器看作<strong>高斯滤波器</strong>的一种推广。</p>
<h6 id="理想高通滤波器及其分析"><a href="#理想高通滤波器及其分析" class="headerlink" title="理想高通滤波器及其分析"></a>理想高通滤波器及其分析</h6><p>可根据低通滤波器特性类比</p>
<h6 id="Butterworth高通滤波器"><a href="#Butterworth高通滤波器" class="headerlink" title="Butterworth高通滤波器"></a>Butterworth高通滤波器</h6><center>
    $H(u, v)=\frac{1}{1+\left[{D}_{0} / {D}({u}, {v})\right]^{2 n}}$
</center>


<p>Butterworth高通滤波器的分析</p>
<ul>
<li>低频成分被严重地削弱，使图像失去层次</li>
<li>改进措施：<ol>
<li>加一个常数项到变换函数中</li>
<li>为解决变暗地趋势，在变换后地图像上再进行一次直方图均衡化（后滤波处理）</li>
</ol>
</li>
</ul>
<h6 id="同形滤波器"><a href="#同形滤波器" class="headerlink" title="同形滤波器"></a>同形滤波器</h6><p>消除图像上照明不均的问题，增加暗区的图像细节，同时又不损失亮区的图像细节，它在频域中同时将亮度范围进行压缩，且将图像对比度进行增强</p>
<p>首先，一个图像也可以用其亮度和反射分量的乘积来表示：</p>
<center>
    $f(x,y) = i(x,y)r(x,y)$
</center>


<p>同形滤波器针对上面两个分量，同时进行滤波处理，但因为两个函数乘积的傅里叶变换是不可以分离的，所以采用取对数ln来操作</p>
<center>
    <img src="/images/dip/dip3_3.webp" ,width="600">
</center>


<p>个人认为可以理解同形滤波器是一定程度上的图像带通滤波</p>
<h5 id="空间域滤波和频域滤波之间的关系"><a href="#空间域滤波和频域滤波之间的关系" class="headerlink" title="空间域滤波和频域滤波之间的关系"></a><font color="blue">空间域滤波和频域滤波之间的关系</font></h5><ul>
<li>频域低通滤波器越窄，滤除的低频成分就越多，图像越模糊；在空间域，这意味着低通滤波器越宽，模板越大</li>
<li>频域可以凭借直观指定滤波器</li>
<li>空间域滤波器效果取决于空间模板的大小</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 id="Ch4-图像复原与恢复"><a href="#Ch4-图像复原与恢复" class="headerlink" title="Ch4 图像复原与恢复"></a><strong>Ch4 图像复原与恢复</strong></h3><h4 id="图像复原的基本概念"><a href="#图像复原的基本概念" class="headerlink" title="图像复原的基本概念"></a>图像复原的基本概念</h4><h5 id="图像退化"><a href="#图像退化" class="headerlink" title="图像退化"></a>图像退化</h5><p><strong>定义：</strong>图像的质量下降叫做退化</p>
<p><strong>形式：</strong>模糊、失真、有噪声等</p>
<p><strong>原因：</strong>无论是由光学、光电或者电子方法获得的图像，均会有不同程度的退化。比如传感器噪声，物体与摄像设备之间的相对移动等</p>
<p>在图像<strong>采集过程</strong>中产生的许多退化常称为模糊，在图像记录过程中产生的退化常称为噪声</p>
<p>如果对退化的类型、机制和过程都十分清楚，就可以利用其反过程来复原图像</p>
<h5 id="图像复原"><a href="#图像复原" class="headerlink" title="图像复原"></a>图像复原</h5><p>对降质了的图像恢复成原来的图像。具体方法：<font color="blue">针对引起图像退化的原因，以及降质过程的某先验知识，建立起退化模型，再针对降质过程采取相反的方向，恢复图像。</font>本质上是一种逆过程。</p>
<p>一般来讲，复原的好坏有一个规定的客观标准，以便对复原的结果作出某种最佳的评估。</p>
<p>&nbsp;</p>
<h4 id="图像退化模型"><a href="#图像退化模型" class="headerlink" title="图像退化模型"></a>图像退化模型</h4><p>退化过程可以看作对原图像作线性运算</p>
<center>
    $ g(x,y) = H f(x,y) + n(x,y)$ 
</center>


<p>其中H是退化模型，n(x,y)是噪声，退化模型被建模为一个退化函数和一个加性噪声项</p>
<p>在后续的讨论中，对退化模型H作出以下的假设：</p>
<ol>
<li>H是线性的</li>
<li>H是空间（或位移）不变的</li>
</ol>
<p>在这里先省略噪声项，可将一幅图像看作是由一系列冲激函数组成的，利用冲激函数的偶函数性质与抽样性质：$\int_{-\infty}^{+\infty} f(t) \delta\left(t-t_{0}\right) d t=f\left(t_{0}\right)$，可推广到二维空间：$f(x, y)=\int_{-\infty}^{\infty} \int_{-\infty}^{\infty} f(\alpha, \beta) \delta(x-\alpha, y-\beta) \mathrm{d} \alpha \mathrm{~d} \beta$，则有$g(x, y)=H \cdot \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} f(\alpha, \beta) \delta(x-\alpha, y-\beta) \mathrm{d} \alpha \mathrm{~d} \beta$</p>
<p>由模型H的两个假设性质可得：</p>
<ol>
<li><p>H是线性的：$g(x,y) = \int_{-\infty}^{\infty} \int_{-\infty}^{\infty}H f(\alpha, \beta) \delta(x-\alpha, y-\beta) \mathrm{d} \alpha \mathrm{~d} \beta$</p>
</li>
<li><p>H是空间位移不变的：</p>
<p>$g(x,y) = \int_{-\infty}^{\infty} \int_{-\infty}^{\infty}f(\alpha, \beta) H \delta(x-\alpha, y-\beta) \mathrm{d} \alpha \mathrm{~d} \beta$</p>
<p>$= \int_{-\infty}^{\infty} \int_{-\infty}^{\infty}f(\alpha, \beta) h(x-\alpha, y-\beta) \mathrm{d} \alpha \mathrm{~d} \beta$</p>
</li>
</ol>
<p>称$h(x,\alpha;y,\beta)$为扩散函数(PSF)或者系统冲激响应</p>
<p>在光学中冲激为一个光点，退化可以理解为系统冲激响应造成的图像的降质</p>
<p>上述公式符合二维卷积的定义，有：</p>
<center>
    $g(x,y) = f(x,y)* h(x,y)$
</center>


<p>如果H是一个可分离系统，即$h(x,\alpha;y,\beta) = h_1(x,\alpha)h_2(y,\beta)$，则二维运算可以分解为列和行两次一维运算来代替</p>
<p>此时在加上噪声：</p>
<center>
    $g(x,y) = f(x,y)+h(x,y) + n(x,y)$
</center>


<p><strong>结论：</strong>一个线性系统完全可以由它的点扩散函数PSF来表征。若系统的点扩散函数已知，则系统在(x,y)处的输出响应可以看成是不同坐标$(\alpha,\beta)$处输入函数$f(\alpha,\beta)$所产生的脉冲响应在$(x,y)$处的叠加。</p>
<p><strong>恢复方法：</strong></p>
<p>空间域中的卷积等于频域中的乘积，频域表示为</p>
<center>
    $G(u,v) = H(u,v)F(u,v)+N(u,v)$
</center>


<p>若略去噪音，有$F(u,v)  = \frac{G(u,v)}{H(u,v)}$</p>
<p>对上式进行傅里叶反变换，可以求得空间域恢复图像</p>
<p>*在数字图像中，需要对上述所有内容进行离散化处理</p>
<p>&nbsp;</p>
<h5 id="噪声介绍"><a href="#噪声介绍" class="headerlink" title="噪声介绍"></a>噪声介绍</h5><p>噪声概率密度函数</p>
<p>高斯噪声 </p>
<center>
    $p(z)=\frac{1}{\sqrt{2 \pi} \sigma} \exp \left[-\frac{(z-\mu)^{2}}{2 \sigma^{2}}\right]$
</center>


<p>均匀噪声 </p>
<center>
    $p(z)=\left\{\begin{array}{ll}
1 /(b-a) & \text { 如果 } \quad a \leqslant z \leqslant b \\
0 & \text { 其他 }
\end{array}\right.$
</center>


<p>椒盐噪声（脉冲噪声）</p>
<center>
    $
    p(z)=\left\{\begin{array}{lll}
P_{a} & \text { 如果 } & z=a \\
P_{b} & \text { 如果 } & z=b \\
0 & \text { 其他 } &
\end{array}\right.
    $
</center>


<ol>
<li>高斯噪声源于电子电路噪声和由低照明度或高温带来的传感器噪声</li>
<li>瑞利噪声对分布再图像范围内特征化噪声有用</li>
<li>gamma分布和指数分布用于激光成像的噪声</li>
<li>均匀密度分布作为模拟随机数产生器的基础</li>
<li>脉冲噪声用于成像中的短暂停留中，比如错误的开关操作</li>
</ol>
<center>
    <img src="/images/dip/dip4_1.webp" , width="500">
</center>




<p>&nbsp;</p>
<h4 id="图像复原的方法"><a href="#图像复原的方法" class="headerlink" title="图像复原的方法"></a>图像复原的方法</h4><h5 id="无约束还原法"><a href="#无约束还原法" class="headerlink" title="无约束还原法"></a>无约束还原法</h5><h6 id="反向滤波法"><a href="#反向滤波法" class="headerlink" title="反向滤波法"></a>反向滤波法</h6><p>有退化模型：$g(x,y) = h(x,y)*f(x,y)+n(x,y)$</p>
<p>无约束的反向滤波法过程如下：</p>
<center>
    $ \begin{array}{l}
\hat{f}(x, y)=g(x, y)^{*} h_{I}(x, y)=\left[h(x, y)^{*} f(x, y)+n(x, y)\right]^{*} h_{I}(x, y) \\
\hat{F}(u, v)=[H(u, v) F(u, v)+N(u, v)] H_{I}(u, v) \\
\text { 设: } \quad H_{I}(u, v)=\frac{1}{H(u, v)} \Rightarrow \hat{F}(u, v)=F(u, v)+\frac{N(u, v)}{H(u, v)}
\end{array}$
</center>


<p>当$H(u,v)$为0或者很小时，复原图像的傅里叶变换趋近于正无穷，噪声完全淹没图像</p>
<p>解决退化函数为0或者非常小的方法：限制滤波的频率，使其接近原点</p>
<h6 id="维纳滤波-最小均方误差滤波"><a href="#维纳滤波-最小均方误差滤波" class="headerlink" title="维纳滤波/最小均方误差滤波"></a><strong>维纳滤波/最小均方误差滤波</strong></h6><p>维纳滤波恢复正是在假定图像信号可以近似看作平稳随机过程的前提下，按照使原图像$f(x,y)$和恢复后的图像$\hat{f}(x,y)$之间的均方误差达到最小的准则，来实现图像恢复，如下：</p>
<center>
    $e^{2}=\min exp\left\{[f(x, y)-\hat{f}(x, y)]^{2}\right\}$
</center>


<p>满足这一要求的转移函数为：</p>
<center>
    $H_{w}(u, v)=\frac{H^{*}(u, v)}{|H(u, v)|^{2}+\frac{S_{n}(u, v)}{S_{f}(u, v)}}$
</center>


<p>其中，$H^{*}(u, v)$是退化函数的复共轭函数，$S_n$是噪声图像功率谱，$S_f$是原始图像功率谱</p>
<p>推广到最小均方误差滤波器：</p>
<center>
    $\hat{F}(u, v)=\left[\frac{1}{H(u, v)} \times \frac{|H(u, v)|^{2}}{|H(u, v)|^{2}+s\left[S_{n}(u, v) / S_{f}(u, v)\right]}\right] G(u, v)$
</center>




<ul>
<li>如果 $s = 1$，方括号内的项就是维纳滤波器</li>
<li>如果s是变量，此时该滤波器被称为参数维纳滤波器</li>
<li>当没有噪声，$S_n(u,v) = 0$时，维纳滤波器退化成反向滤波器中的理想滤波器</li>
</ul>
<h5 id="有约束还原法"><a href="#有约束还原法" class="headerlink" title="有约束还原法"></a>有约束还原法</h5><h6 id="最大平滑复原"><a href="#最大平滑复原" class="headerlink" title="最大平滑复原"></a>最大平滑复原</h6><p>准则：以函数平滑为基础</p>
<ol>
<li>使得函数的二阶导数为最小</li>
<li>用内积来考察函数的平滑性</li>
</ol>
<p>&nbsp;</p>
<h4 id="运动模糊图像的复原"><a href="#运动模糊图像的复原" class="headerlink" title="运动模糊图像的复原"></a>运动模糊图像的复原</h4><h5 id="根据先验知识（退化的原因为已知）"><a href="#根据先验知识（退化的原因为已知）" class="headerlink" title="根据先验知识（退化的原因为已知）"></a>根据先验知识（退化的原因为已知）</h5><h6 id="大气湍流造成的传递函数"><a href="#大气湍流造成的传递函数" class="headerlink" title="大气湍流造成的传递函数"></a>大气湍流造成的传递函数</h6><center>
    $H(u, v)=\exp \left[-c\left(u^{2}+v^{2}\right)^{5 / 6}\right]$
</center>


<p>c是与湍流性质有关的常数</p>
<h6 id="光学系统散焦的传递函数"><a href="#光学系统散焦的传递函数" class="headerlink" title="光学系统散焦的传递函数"></a>光学系统散焦的传递函数</h6><center>
    $
H(u, v)=J_{1}(\pi \mathrm{~d} \rho) / \pi \mathrm{d} \rho \\
$
</center>


<p>此处$\rho=\sqrt{u^{2}+v^{2}} $，d是光学系统散焦点扩散函数的直径</p>
<p>$J_1()$是第一类一阶贝塞尔函数</p>
<center>
    $ J_{1}(Z)=\frac{Z}{2} \sum_{k=0}^{\infty} \frac{(-1)^{k} Z^{2 k}}{2^{2 k} \cdot k(k+1)}  $
</center>




<p>当光学系统散焦时，点光源的像将变成圆盘。从公式可以看出，散焦系统的传递函数在以原点为中心，d为半径处存在零点，形成一些同心的暗环，由散焦图像的频谱上估计出这些同心圆的半径，可以得到$H(u,v)$</p>
<h6 id="匀速直线运动模糊下的传递函数"><a href="#匀速直线运动模糊下的传递函数" class="headerlink" title="匀速直线运动模糊下的传递函数"></a>匀速直线运动模糊下的传递函数</h6><p>相机与景物之间相对运动造成图像降质</p>
<p>设相机不动，对象运动，运动分量x，y分别为$x_0(t),y_0(t)$，相机快门速度是理想的，快门开启时间（曝光时间为$T_0$, 这里的模糊后的图像值为：</p>
<center>
    $
    g(x, y)=\int_{0}^{T} f\left[x-x_{0}(t), y-y_{0}(t)\right] \mathrm{d} t
    $
</center>


<p>模糊传递函数为</p>
<center>
    $H(u,v) = \frac{sin\pi l w}{\pi l w}$
</center>


<p>这里的l为由于运动造成的点位移的长度，$w = ucons\phi + v sin\phi$</p>
<p>&nbsp;</p>
<h5 id="根据图像中的点或者线估计-后验知识"><a href="#根据图像中的点或者线估计-后验知识" class="headerlink" title="根据图像中的点或者线估计(后验知识)"></a>根据图像中的点或者线估计(后验知识)</h5><h5 id="由功率谱估计传递函数"><a href="#由功率谱估计传递函数" class="headerlink" title="由功率谱估计传递函数"></a>由功率谱估计传递函数</h5><h5 id="噪声的确定"><a href="#噪声的确定" class="headerlink" title="噪声的确定"></a>噪声的确定</h5><p>只要噪声带宽远大于图像带宽即可作白噪声处理</p>
<p>&nbsp;</p>
<h4 id="图像的几何校正"><a href="#图像的几何校正" class="headerlink" title="图像的几何校正"></a>图像的几何校正</h4><p>概念：几何校正是一种几何变换，是图像的几何畸变的反运算，与几何变换类似。</p>
<p>步骤：空间变换，灰度插值</p>
<p>几何基准图像的坐标系统用$(x,y)$来表示，需要校正的图像的坐标系统用 $(x^{‘},y^{‘})$表示，两个坐标系统之间的关系用解析式表示：</p>
<center>
    $\begin{array}{l}
x^{\prime}=h_{1}(x, y) \\
y^{\prime}=h_{2}(x, y)
\end{array}$
</center>


<p>通常可以用多项式表示</p>
<center>
    $\begin{aligned}
x^{\prime} & =\sum_{i=0}^{N-1} \sum_{j=0}^{N-1} a_{i j} x^{i} y^{j} \\
y^{\prime} & =\sum_{i=0}^{N-1} \sum_{j=0}^{N-1} b_{i j} x^{i} y^{j}
\end{aligned}$
</center>


<h6 id="空间变换"><a href="#空间变换" class="headerlink" title="空间变换"></a>空间变换</h6><p>对于空间变换，通常可以用线性畸变来近似较小的几何畸变</p>
<center>
    $\begin{array}{l}
x^{\prime}=a_{0}+a_{1} x+a_{2} y \\
y^{\prime}=b_{0}+b_{1} x+b_{2} y
\end{array}$
</center>


<p>也可以用更精确一些的二次型来近似</p>
<p>对于线性畸变，可以在基准图上找出三个点，在畸变图上也找出对应的三个点</p>
<p>联立解出上面的6个系数</p>
<p>二次畸变方程与系数量更多</p>
<h6 id="灰度插值"><a href="#灰度插值" class="headerlink" title="灰度插值"></a>灰度插值</h6><p>由输出图像坐标反算出输入图像坐标时，若该坐标并非整数，需要进行灰度再采样</p>
<p>有以下几种方法：</p>
<ul>
<li>最邻近插值：最简单，但会有块状效应</li>
<li>双线性插值：2*2邻域采样点的平均值</li>
<li>双三次插值：4*4邻域，计算函数为三次函数，效果最好，计算量最大</li>
</ul>
<p>&nbsp;</p>
<h4 id="图像复原的应用"><a href="#图像复原的应用" class="headerlink" title="图像复原的应用"></a>图像复原的应用</h4><h5 id="图像复原的空间滤波器（只存在噪声）"><a href="#图像复原的空间滤波器（只存在噪声）" class="headerlink" title="图像复原的空间滤波器（只存在噪声）"></a>图像复原的空间滤波器（只存在噪声）</h5><ul>
<li><p>均值滤波器（可见图像增强笔记）</p>
</li>
<li><p>顺序统计滤波器（可见图像增强笔记）</p>
</li>
<li><p>自适应滤波器</p>
<p>行为变化基于由mxn矩形窗口定义的区域$S_{xy}$内的图像统计特性</p>
<p>与前述滤波器相比，性能更优，但也增加了算法复杂度</p>
<p>包括自适应局部噪声消除滤波器和自适应中值滤波器</p>
</li>
</ul>
<h6 id="自适应局部噪声消除滤波器"><a href="#自适应局部噪声消除滤波器" class="headerlink" title="自适应局部噪声消除滤波器"></a>自适应局部噪声消除滤波器</h6><p>滤波器响应基于以下4个量：</p>
<ol>
<li>$g(x,y)$,表示噪声图像在点$(x,y)$上的值</li>
<li>$\sigma_{\eta}^{2}$，$g(x,y)$的噪声方差</li>
<li>$m_L$，在$S_{xy}$上像素点的局部均值</li>
<li>$\sigma_{L}^{2}$，在$S_{xy}$上像素点的局部方差</li>
</ol>
<p>有：</p>
<center>
    $\hat{f}(x, y)=g(x, y)-\frac{\sigma_{\eta}^{2}}{\sigma_{L}^{2}}\left[g(x, y)-m_{L}\right]$
</center>


<p>唯一需要知道或者估计的未知量是噪声方差$\sigma_{\eta}^{2}$，其他参数可以从$S_{xy}$中的像素计算出来</p>
<h6 id="自适应中值滤波器"><a href="#自适应中值滤波器" class="headerlink" title="自适应中值滤波器"></a>自适应中值滤波器</h6><p>两个进程，是推理窗口扩大的过程</p>
<h5 id="图像复原的频率域滤波器"><a href="#图像复原的频率域滤波器" class="headerlink" title="图像复原的频率域滤波器"></a>图像复原的频率域滤波器</h5><h6 id="带通滤波器"><a href="#带通滤波器" class="headerlink" title="带通滤波器"></a>带通滤波器</h6><h6 id="带阻滤波器"><a href="#带阻滤波器" class="headerlink" title="带阻滤波器"></a>带阻滤波器</h6><h6 id="陷波滤波器"><a href="#陷波滤波器" class="headerlink" title="陷波滤波器"></a>陷波滤波器</h6><p>理想滤波器 &amp; 巴特沃斯滤波器 &amp; 高斯滤波器，同图像增强章节</p>
<p>&nbsp;</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>图像增强与图像复原有交叉部分</p>
<p>图像增强主要是<strong>主观</strong>过程，而图像复原主要是<strong>客观</strong>过程</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 id="Ch5-彩色图像处理"><a href="#Ch5-彩色图像处理" class="headerlink" title="Ch5 彩色图像处理"></a>Ch5 彩色图像处理</h3><p>彩色图像处理可以分为：</p>
<p><strong>全彩色处理：</strong>数码相机，彩色扫描仪</p>
<p><strong>伪彩色处理：</strong>对不同灰度或灰度范围赋予不同的颜色</p>
<p>&nbsp;</p>
<h4 id="彩色空间"><a href="#彩色空间" class="headerlink" title="彩色空间"></a>彩色空间</h4><p>——也称为彩色模型或者彩色系统</p>
<p>——example: <strong>RGB</strong> \ <strong>CMY &amp; CMYK</strong> \ <strong>HSI</strong> \ <strong>YIQ</strong> \ <strong>YUV</strong> \ <strong>YCbCr</strong></p>
<ul>
<li><p>RGB</p>
<p>CCD或者CMOS技术直接感知RGB三个分量（本身光电传感器无法识别颜色，增加滤光片之后可以分辨）</p>
</li>
<li><p>CMY &amp; CMYK</p>
<p>CMY（青色，品红，黄）CMYK（青、品红、黄、黑）</p>
<p>大多数在纸上沉积彩色颜料的设备，比如彩色打印机和复印机、印刷设备</p>
<p>打印中的主要颜色是黑色，等量的CMY原色可以产生黑色，但不纯</p>
</li>
<li><p>HSI</p>
<p>HSI（色调，饱和度，亮度）</p>
<p>I分量与图像的彩色信息无关</p>
<p>H和S分量与人感受颜色的方式是紧密相连的</p>
<p>广泛用于计算机视觉、图像检索和视频检索</p>
</li>
<li><p>YIQ &amp; YUV</p>
<p>Y指亮度，即灰度值</p>
<p>I和Q指色调，描述色彩及饱和度，U和V也指色调，与前者不同</p>
<p>用于彩色电视广播，YIQ被北美的电视系统所采用，YUV被欧洲的电视系统所采用</p>
<p>Y分量可提供黑白电视机的所有影像信息</p>
</li>
<li><p>YCbCr</p>
<p>Y指亮度</p>
<p>Cb和Cr由U和V调整得到</p>
<p>JPEG采用的彩色空间</p>
</li>
</ul>
<p>&nbsp;</p>
<h5 id="彩色空间的转换（RGB与其他）"><a href="#彩色空间的转换（RGB与其他）" class="headerlink" title="彩色空间的转换（RGB与其他）"></a>彩色空间的转换（RGB与其他）</h5><p>CMY</p>
<p>将所有值都归一化之后：</p>
<center>
    $
    \left[\begin{array}{l}
C \\
M \\
Y
\end{array}\right]=\left[\begin{array}{l}
1 \\
1 \\
1
\end{array}\right]-\left[\begin{array}{l}
R \\
G \\
B
\end{array}\right]
    $
</center>


<p>RGB-&gt;HSI</p>
<center>
    $
    \begin{array}{l}
H=\left\{\begin{array}{ll}
\theta & B \leq G \\
360-\theta & B>G
\end{array}\right. \\
\theta=\arccos \left\{\frac{\frac{1}{2}[(R-G)+(R-B)]}{\left[(R-G)^{2}+(R-G)(G-B)\right]^{\frac{1}{2}}}\right\} \\
S=1-\frac{3}{(R+G+B)}[\min (R, G, B)] \\
I=\frac{1}{3}(R+G+B)
\end{array}$
</center>


<p>HSI-&gt;RGB</p>
<p>$\begin{array}{l}<br>0^{0} \leq H&lt;120^{\circ} \\<br>R=I\left[1+\frac{S \cos H}{\cos \left(60^{\circ}-H\right)}\right] \quad G=1-(R+B) \quad B=I(1-s)<br>\end{array}$</p>
<p>$\begin{array}{l}<br>120^{0} \leq H&lt;240^{\circ} \\<br>G=I\left[1+\frac{S \cos H}{\cos \left(60^{\circ}-H\right)}\right] \quad B=1-(R+G) \quad R=I(1-s)<br>\end{array}$</p>
<p>$\begin{array}{l}<br>240^{0} \leq H&lt;360^{\circ} \\<br>B=I\left[1+\frac{S \cos H}{\cos \left(60^{\circ}-H\right)}\right] \quad R=1-(G+B) \quad G=I(1-s)<br>\end{array}$</p>
<p>其他</p>
<p>需要数值矩阵</p>
<p>&nbsp;</p>
<h4 id="伪彩色图像处理"><a href="#伪彩色图像处理" class="headerlink" title="伪彩色图像处理"></a>伪彩色图像处理</h4><p>思想：根据一定的准则对灰度值赋值以彩色的处理</p>
<p>为什么需要：人类可以辨别上千种颜色和强度，但只能辨别二十几种灰度，因此需要一种能够帮助人类观察与解释灰度图像的技术</p>
<p>如何：强度分层技术 &amp; 灰度级到彩色转换技术</p>
<h5 id="强度分层技术"><a href="#强度分层技术" class="headerlink" title="强度分层技术"></a>强度分层技术</h5><p>简单来说就是对图像灰度分层切割之后分配彩色值</p>
<center>
    <img src="/images/dip/dip5_1.webp" , width="400">
</center>




<p>灰度级到彩色的转换</p>
<p>对任何输入像素的灰度级执行3个独立变换</p>
<p>3个变换结果分别送入彩色监视器的红绿蓝三个通道，产生一幅合成图像</p>
<center>
    <img src="/images/dip/dip5_2.webp" , width="400">
</center>




<p>应用：X光扫描行李箱</p>
<p>&nbsp;</p>
<h4 id="全彩色图像处理"><a href="#全彩色图像处理" class="headerlink" title="全彩色图像处理"></a>全彩色图像处理</h4><p>分为两大类：</p>
<ol>
<li>分别处理每一个分量的图像后合成彩色图像</li>
<li>直接对彩色图像处理：3个颜色分量表示像素向量</li>
</ol>
<p>&nbsp;</p>
<h4 id="彩色变换"><a href="#彩色变换" class="headerlink" title="彩色变换"></a>彩色变换</h4><p>彩色变换函数：</p>
<center>
    $
g(x, y)=T[f(x, y)]\\
 f(x, y)  是彩色输入图像 \\ g(x, y)  是变换或处理过的彩色输出图像  \\T  是在空间邻域  (x, y)  上对 f 的操作
  $
</center>


<p>对于某一个点处彩色分量的变量：</p>
<center>
    $
s_{i}=T_{i}\left(r_{1}, r_{2}, \ldots, r_{n}\right) \quad i=1,2, \ldots, n\\


 r_{i}  和  S_{i}  是  f(x, y)  和  g(x, y)  在任何点处彩色分量的变量\\
 \left\{T_{1}, T_{2}, \ldots T_{n}\right\}  是一个对  r_{i}  操作产生  s_{i}  的变换或彩色映射函数集$
</center>

<p><strong>补色：</strong>在彩色环上，与一种色调直接相对立的另一种色调称为补色</p>
<p><strong>色调校正：</strong>实验性地调整图像亮度和对比度</p>
<p><strong>彩色平衡：</strong></p>
<p><strong>偏色：</strong></p>
<p>采样过程中，由于设备、环境的原因会造成图象的三个颜色分量不同的变换关系，使图象中所有物体的颜色偏离了其原有的真实色彩，这种现象被称为偏色。</p>
<p>如何检查彩色图像的偏色问题：即检查在现实种应该是灰色的物体，在图像中是否是灰色</p>
<p>色彩平衡算法：需要选取灰色区域，<font color="blue">按某一个RGB分量作为线性校正的基准</font></p>
<p>&nbsp;</p>
<h4 id="彩色图像平滑和尖锐化"><a href="#彩色图像平滑和尖锐化" class="headerlink" title="彩色图像平滑和尖锐化"></a>彩色图像平滑和尖锐化</h4><p>同灰度图像，有空间域滤波与频率微分，只是输入通道换成了对应彩色空间的n个分量</p>
<p>彩色空间分割：</p>
<p><strong>HSI：</strong>可用直方图分割</p>
<p><strong>RGB：</strong>可用不同像素的颜色向量与分割样本的颜色向量之间的欧氏距离为判据</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 id="Ch6-形态学图像处理"><a href="#Ch6-形态学图像处理" class="headerlink" title="Ch6 形态学图像处理"></a>Ch6 形态学图像处理</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p><strong>形态学：</strong>是生物学中研究动物和植物结构的一个分支。</p>
<p><strong>数学形态学（图像代数）：</strong>以形态为基础对图像进行分析的数学工具。</p>
<p><strong>形态学图像处理的应用：</strong>可以简化图像数据，保持它们基本的形状特性，并除去不相干的结构。</p>
<p><strong>思想：</strong>用具有一定形态的结构元素，去度量和提取图像中的对应形状，以达到对图像分析和识别的目的</p>
<p><strong>发展：</strong>初期的数学形态学方法仅可以应用于二值图像，所以需要将灰度图像先进行二值化。后来灰度形态学得到发展，使得数学形态学方法不仅可以用于二值图像，也可以应用于各种灰度与彩色图像。</p>
<p>&nbsp;</p>
<p>二值形态学中的运算对象是<strong>集合</strong>，但实际运算中当涉及两个集合时并不把他们看作是互相对等的，一般设A为图像集合，B为结构元素，数学形态学运算是用B对A进行操作。</p>
<p>结构元素本身实际上也是一个图像集合。对每个结构元素，先要指定一个原点，它是结构元素参与形态学运算的参考点。注意原点可以包含在结构元素中，也可以不包含在结构元素中（即原点并不一定要属于结构元素），但两种情况下的运算结果常不相同 。</p>
<p><strong>集合论中的基本概念：</strong>并，交，补，差</p>
<center>
    <img src="/images/dip/dip6_1.webp" width="500">
</center>





<p>有公式：</p>
<ol>
<li><p>集合A的平移，平移到z(z1,z2)</p>
<center>
    $(A)_{z}=\{c \mid c=a+z, a \in A\}$
</center>




</li>
</ol>
<ol>
<li><p>B的反射：关于结构元素的原点</p>
<center>
    $\hat{B}=\{w \mid w=-b, b \in B\}$
</center>





</li>
</ol>
<p>示意图如下：</p>
<center>
    <img src="/images/dip/dip6_2.webp" width="400">
</center>



<p>&nbsp;</p>
<h5 id="二值图像的基本逻辑运算"><a href="#二值图像的基本逻辑运算" class="headerlink" title="二值图像的基本逻辑运算"></a>二值图像的基本逻辑运算</h5><center>
    <img src="/images/dip/dip6_3.webp" width="400">
</center>



<p>&nbsp;</p>
<h4 id="膨胀与腐蚀"><a href="#膨胀与腐蚀" class="headerlink" title="膨胀与腐蚀"></a>膨胀与腐蚀</h4><p>膨胀与腐蚀是形态学算法的基础</p>
<p>膨胀：使得图像扩大</p>
<p>腐蚀：使得图像缩小</p>
<h5 id="膨胀："><a href="#膨胀：" class="headerlink" title="膨胀："></a>膨胀：</h5><p>A被B膨胀的定义：</p>
<center>
    $A \oplus B=\left\{z \mid(\hat{B})_{z} \cap A \neq \varnothing\right\}$
</center>




<p>A为图像元素，B为结构元素，上述式子表明，B的反射进行平移后与A的交集不为空</p>
<p><strong>反射的目的：</strong>确保膨胀的空间对称性</p>
<font color="blue">算法实现过程：</font>

<ul>
<li><font color="blue">对B进行反射，反射后B的原点移动至集合A的某一点</font></li>
<li><font color="blue">将反射后B的坐标与集合A中该店坐标相加，得到膨胀运算结果</font></li>
<li><font color="blue">对集合A中所有元素重复上述过程</font>

</li>
</ul>
<p>example:</p>
<center>
    <img src="/images/dip/dip6_4.webp" width="300">
</center>


<center>
    <img src="/images/dip/dip6_5.webp" width="300">
</center>



<p><strong>应用：</strong>将裂缝桥接起来</p>
<p>&nbsp;</p>
<h5 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a><strong>腐蚀</strong></h5><p>B对A的腐蚀是一个用z平移的B包含在A中所有的点z的集合，可以理解为，B完全包含在A中时，B的原点位置的集合</p>
<p>定义：</p>
<center>
    $A \ominus B=\left\{z \mid(B)_{z} \subseteq A\right\}$
</center>


<p>膨胀和腐蚀这两种运算是紧密联系在一起的，一个运算对图像目标的操作相当于另一个运算对图像背景的操作</p>
<p>example：</p>
<center>
    <img src="/images/dip/dip6_6.webp" width="300">
</center>


<center>
    <img src="/images/dip/dip6_7.webp" width="300">
</center>



<p><strong>应用：</strong>在数学形态学运算中的作用是消除物体边界点，可以把小于结构元素的物体（毛刺、小突起）去除，因此选取不同大小的结构元素，就可以在原始图像中去除不同大小的物体，达到<font color="red">筛选</font>的目的</p>
<p>&nbsp;</p>
<h4 id="开操作和闭操作"><a href="#开操作和闭操作" class="headerlink" title="开操作和闭操作"></a>开操作和闭操作</h4><p><strong>开操作：</strong>使图像的轮廓变得光滑，断开狭窄的连接和消除细的突出物</p>
<center>
    $A \circ B=(A \ominus B) \oplus B$
</center>


<p>先用B对A腐蚀，然后用B对结果进行膨胀</p>
<p>&nbsp;</p>
<p><strong>闭操作：</strong>同样使得图像的轮廓变得光滑，但与开操作相反，能消除狭窄的间断与长细的鸿沟，消除小的空洞，并填补轮廓线中的裂痕</p>
<center>
    $A \bullet B=(A \oplus B) \ominus B$
</center>


<p>先用B对A膨胀，然后用B对结果进行腐蚀</p>
<center>
    <img src="/images/dip/dip6_8.webp" width="300">
</center>



<p>&nbsp;</p>
<h4 id="击中或击不中变换"><a href="#击中或击不中变换" class="headerlink" title="击中或击不中变换"></a>击中或击不中变换</h4><p> 一般来说，一个物体的结构可以由物体内部各种成分之间的关系来确定。为了研究物体（在这里指图像）的结构，可以逐个地利用其各种成分 （例如各种结构元素）对其进行检验，判定哪些成分包括在图像内，哪些在图像外，从而最终确定图像的结构。</p>
<p>设有两幅图像A &amp; B，如果A与B的交集不为空集，那么称B击中A，否则称B击不中A</p>
<p>&nbsp;</p>
<h4 id="一些基本的形态学算法"><a href="#一些基本的形态学算法" class="headerlink" title="一些基本的形态学算法"></a>一些基本的形态学算法</h4><h5 id="边界提取"><a href="#边界提取" class="headerlink" title="边界提取"></a>边界提取</h5><center>
    $\beta(A)=A-(A \ominus B)$
</center>


<p>先用B对A腐蚀，然后用A减去腐蚀的结果</p>
<p>使用3x3的结构元素提取的边界宽度为1像素</p>
<center>
    <img src="/images/dip/dip6_9.webp" width="300">
</center>


<h5 id="区域填充"><a href="#区域填充" class="headerlink" title="区域填充"></a>区域填充</h5><p>使用迭代法进行区域填充</p>
<center>
    $X_{k}=\left(X_{k-1} \oplus B\right) \cap A^{c}$
</center>


<p>如下图所示：$X_7 = X_8$，当$X_k = X_{k-1}$时，算法在迭代的第k步结束</p>
<center>
    <image src="/images/dip/dip6_10.webp" width="300">
</image></center>





<p>*如果公式不加与A的补集的交集，则结果将会无限膨胀</p>
<h5 id="凸壳-细化-粗化-骨架-裁剪等"><a href="#凸壳-细化-粗化-骨架-裁剪等" class="headerlink" title="凸壳 细化 粗化 骨架 裁剪等"></a>凸壳 细化 粗化 骨架 裁剪等</h5><h5 id="二值形态学的五个基本结构元素（B）"><a href="#二值形态学的五个基本结构元素（B）" class="headerlink" title="二值形态学的五个基本结构元素（B）"></a>二值形态学的五个基本结构元素（B）</h5><center>
    <image src="/images/dip/dip6_11.webp" width="400">
</image></center>



<p>&nbsp;</p>
<h4 id="灰度级形态学"><a href="#灰度级形态学" class="headerlink" title="灰度级形态学"></a>灰度级形态学</h4><h5 id="膨胀-amp-腐蚀"><a href="#膨胀-amp-腐蚀" class="headerlink" title="膨胀 &amp; 腐蚀"></a>膨胀 &amp; 腐蚀</h5><p>膨胀：</p>
<center>
    $(f \oplus b)(s, t)=\max \left\{f(s-x, t-y)+b(x, y)(s-x),(t-y) \in D_{f} ;(x, y) \in D_{b}\right\}
    $
</center>


<p>亮特征变强，暗特征变弱</p>
<center>
    <image src="/images/dip/dip6_12.webp" width="400">
</image></center>



<p>腐蚀：</p>
<center>
    $(f \ominus b)(s, t)=\min \left\{f(s+x, t+y)-b(x, y)(s+x),(t+y) \in D_{f} ;(x, y) \in D_{b}\right\}
    $
</center>


<p>亮特征变弱，暗特征变强</p>
<center>
    <image src="/images/dip/dip6_13.webp" width="400">
</image></center>



<h5 id="开操作与闭操作"><a href="#开操作与闭操作" class="headerlink" title="开操作与闭操作"></a>开操作与闭操作</h5><p>与二值化图像操作的构成相同</p>
<p>&nbsp;</p>
<h5 id="灰度级形态学处理的一些应用"><a href="#灰度级形态学处理的一些应用" class="headerlink" title="灰度级形态学处理的一些应用"></a>灰度级形态学处理的一些应用</h5><h6 id="形态学平滑处理"><a href="#形态学平滑处理" class="headerlink" title="形态学平滑处理"></a>形态学平滑处理</h6><p>先开操作，再闭操作：消除/减弱人为的亮和暗的细节</p>
<h6 id="形态学图像梯度（边缘增强）"><a href="#形态学图像梯度（边缘增强）" class="headerlink" title="形态学图像梯度（边缘增强）"></a>形态学图像梯度（边缘增强）</h6><p>类似于微分 or 梯度操作</p>
<p>膨胀粗化图像中的目标区域，腐蚀细化它们，两者之差强调了区域间的边界</p>
<center>
    $g=(f \oplus b)-(f \ominus b)$
</center>


<h6 id="Top-hat变换"><a href="#Top-hat变换" class="headerlink" title="Top-hat变换"></a>Top-hat变换</h6><p>可增强阴影细节</p>
<center>
    $h=f-(f \circ b)$
</center>


<h6 id="粒度测定"><a href="#粒度测定" class="headerlink" title="粒度测定"></a>粒度测定</h6><ul>
<li><p>选择各类合适半径尺寸的圆盘结构元对图像进行开操作</p>
</li>
<li><p>对于每一次开操作，计算像素值的和</p>
</li>
<li><p>表面区域是圆盘形结构元半径的函数</p>
<p><strong>*为什么不直接腐蚀：</strong>单纯腐蚀会导致颗粒尺寸被低估，开操作通过结构元素与颗粒的匹配度筛选尺寸，结果更接近真实分布</p>
</li>
</ul>
<h6 id="纹理分割"><a href="#纹理分割" class="headerlink" title="纹理分割"></a>纹理分割</h6><ul>
<li>对原图执行闭操作删除小圆点</li>
<li>执行开操作删除大圆点之间的亮间隔，得到分割边界</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 id="Ch7-图像分割"><a href="#Ch7-图像分割" class="headerlink" title="Ch7 图像分割"></a>Ch7 图像分割</h3><h4 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h4><p>图像分割是指把图像分成各个具有相应特性的区域并提取出感兴趣目标的技术和过程</p>
<p>特性包括：灰度、颜色、纹理等，目标可以对应单个区域，也可以对应多个区域</p>
<h6 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h6><ul>
<li>按幅度不同分割：幅度分割</li>
<li>按边缘不同分割：边缘检测</li>
<li>按形状不同分割：区域检测</li>
</ul>
<p>对灰度图像的分割常可以基于像素灰度值的两个性质： <strong>不连续性</strong>和<strong>相似性</strong>。区域内部的像素一般具有灰度相似性，而在区域之间的边界上一般具有灰度不连续性。不连续性-&gt;基于边界的分割；相似性-&gt;基于区域的分割</p>
<p>&nbsp;</p>
<h4 id="间断检测"><a href="#间断检测" class="headerlink" title="间断检测"></a>间断检测</h4><h5 id="点检测"><a href="#点检测" class="headerlink" title="点检测"></a>点检测</h5><p>使用模板</p>
<center>
    $R = w_1z_1+w_2z_2+w_3z_3+...+w_9z_9 = \sum_{i=1}^{9}w_iz_i$
</center>

<p>人为设置阈值，且如果模板的响应为0，则表示在灰度级为常数的区域</p>
<h5 id="线检测"><a href="#线检测" class="headerlink" title="线检测"></a>线检测</h5><p>有4个线检测模板，分别在水平，+45°，垂直以及-45°方向上有最大响应</p>
<center>
    <img src="/images/dip/dip7_1.webp" width="400">
</center>

<h5 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h5><ul>
<li>边缘是一组相连的像素集合，这些像素位于两个区域的边界上。灰度边缘是灰度值不连续的结果。</li>
<li>一阶导数与二阶导数在识别图像的边缘中具有重要的作用</li>
</ul>
<p>数字边缘的模型有：理想数字边缘模型 &amp; 斜坡数字边缘模型。理想数字边缘模型是一种阶跃型的信号，而斜坡数字边缘模型与边缘的模糊程度成比例关系。</p>
<center>
    <img src="/images/dip/dip7_2.webp" width="400">
</center>

<p>如上图所示，以斜坡数字边缘模型为例，可对其求导，在边缘斜面上，一阶导数为正，其他区域为0；在边缘与黑色交界处，二阶导数为正，在边缘与亮色交界处，二阶导数为负；沿着斜坡和灰度为常数的区域为0。</p>
<p>因此有：</p>
<ul>
<li>一阶导数可以用于检测图像中的一个点是否在边缘上</li>
<li>二阶导数的符号可以判断一个边缘像素是在边缘的亮侧还是在边缘的暗侧</li>
<li>一阶导数使用<strong>梯度算子</strong>，二阶导数使用<strong>拉普拉斯算子</strong></li>
</ul>
<p><strong>*微弱的噪声对导数的影像非常严重，所以预处理要先降噪/平滑处理</strong></p>
<p>边缘检测算子</p>
<ul>
<li>梯度算子 or 差分算子</li>
<li>Laplace算子 </li>
<li>Canny算子</li>
</ul>
<p>&nbsp;</p>
<h5 id="梯度算子"><a href="#梯度算子" class="headerlink" title="梯度算子"></a>梯度算子</h5><p>$\nabla f(x, y) = G[f(x,y)] = [\frac{\partial f}{\partial x} \frac{\partial f}{\partial y}]^{T}$ </p>
<p>梯度的模：$|\nabla f(x, y)|=\sqrt{\left(\frac{\partial f}{\partial x}\right)^{2}+\left(\frac{\partial f}{\partial y}\right)^{2}}$</p>
<p>方向角：$\phi(x, y)=\arctan \left(G_{x} / G_{y}\right)$</p>
<p>离散化后为：$\nabla f(x, y)=|f(x, y)-f(x+1, y+1)|+|f(x+1, y)-f(x, y+1)|$</p>
<p>在空间域图像增强的基础上增加梯度算子<strong>Kirsch</strong>：</p>
<p>由8个方向模板组成，每个模板的值有不同的趋向性，将8个模板分别与图像相乘，选取最大的一个值，作为中央像素的边缘强度。使得梯度算子一定程度上具有了<strong>方向性</strong>。</p>
<p>&nbsp;</p>
<h5 id="拉普拉斯算子"><a href="#拉普拉斯算子" class="headerlink" title="拉普拉斯算子"></a>拉普拉斯算子</h5><p>公式与模板：</p>
<center>
    $
    \begin{array}{l} 
\nabla^{2} f(x, y)=\frac{\partial^{2} f(x, y)}{\partial x^{2}}+\frac{\partial^{2} f(x, y)}{\partial y^{2}} \\
=f(x+1, y)+f(x-1, y)+f(x, y-1)+4 f(x, y) \\\\
{\left[\begin{array}{ccc}
0 & -1 & 0 \\
-1 & 4 & -1 \\
0 & -1 & 0
\end{array}\right] \quad\left[\begin{array}{ccc}
-1 & -1 & -1 \\
-1 & 8 & -1 \\
-1 & -1 & -1
\end{array}\right] \quad\left[\begin{array}{ccc}
1 & -2 & 1 \\
-2 & 4 & -2 \\
1 & -2 & 1
\end{array}\right] }
\end{array}
    $
</center>

<p>推广：</p>
<p>为减少噪声对拉普拉斯算子的影响，在其基础上实现的<strong>马尔算子</strong>，它先用一个2D的高斯平滑模板与源图像进行卷积，之后再进行拉普拉斯算子套用。</p>
<p>&nbsp;</p>
<p><strong>最优边缘检测算法——Canny算子</strong></p>
<p>好的图像边缘检测需要满足下面两个条件：</p>
<ol>
<li><p>能有效地抑制噪声</p>
</li>
<li><p>能精确地定位到边缘的位置</p>
<p>类似于马尔算子，Canny算子也属于先平滑后求导的方法</p>
</li>
</ol>
<p><strong><font color="blue">算法步骤</font></strong></p>
<ul>
<li>用高斯滤波器平滑图像：</li>
</ul>
<center>
    <font color="blue">
    $G(x, y)=f(x, y) * H(x, y)$
    </font>
</center>

<ul>
<li>用一阶偏导的有限差分来计算梯度的幅值和方向</li>
</ul>
<center>
    <font color="blue">
    $\begin{array}{l}
H_{1}=\left|\begin{array}{cc}
-1 & -1 \\
1 & 1
\end{array}\right| \quad H_{2}=\left|\begin{array}{ll}
1 & -1 \\
1 & -1
\end{array}\right| \\
\varphi_{1}(m, n)=f(m, n) * H_{1}(m, n) \\
\varphi_{2}(m, n)=f(m, n) * H_{2}(m, n) \\
\varphi(m, n)=\sqrt{\varphi_{1}^{2}(m, n)+\varphi_{2}^{2}(m, n)} \\
\theta_{\varphi}(m, n)=\tan ^{-1} \frac{\varphi_{2}(m, n)}{\varphi_{1}(m, n)}
\end{array}$
    </font>
</center>

<ul>
<li>非极大值抑制——细化边缘</li>
</ul>
<p>利用梯度的方向，保留局部梯度最大的点</p>
<center>
    <font color="blue">
    $\xi[\mathbf{i}, \mathbf{j}]=\operatorname{Sector}(\theta[\mathbf{i}, \mathbf{j}])$
    </font>
</center>

<p>在一个3x3的邻域中，4种类型的边缘方向的边缘法线有一定的角度范围，在每一点上，邻域的中心像素M与沿着梯度线的两个像素相比。如果M的梯度值不比沿梯度线的两个相邻像素梯度值大，则令M = 0.</p>
<center>
    <font color="blue">
    $\mathbf{N}[\mathbf{i}, \mathbf{j}]=\mathbf{N M S}(\mathbf{M}[\mathbf{i}, \mathbf{j}], \xi[\mathbf{i}, \mathbf{j}])$
    </font>
</center>



<ul>
<li>阈值化</li>
</ul>
<p>对N使用一个阈值，将低于阈值的所有值赋0，解决方法为双阈值算法</p>
<p>&nbsp;</p>
<h4 id="边缘连接"><a href="#边缘连接" class="headerlink" title="边缘连接"></a>边缘连接</h4><p>在边缘检测后，仅仅得到位置在边缘上的像素点，实际上得到的这些像素点由于各种原因很少能完整地组成一条边缘，因此在使用边缘检测算法之后，需要使用连接过程将边缘像素组合成有意义的边缘。</p>
<h5 id="局部处理"><a href="#局部处理" class="headerlink" title="局部处理"></a>局部处理</h5><p><strong>如何确定边缘像素的相似性</strong></p>
<p>对于两个边缘像素，若以下两个值：</p>
<ul>
<li><p>边缘像素梯度算子的响应强度</p>
</li>
<li><p>边缘像素梯度算子的方向</p>
</li>
</ul>
<p>在自己设定的阈值范围内，则可以将两点连接起来</p>
<h5 id="轮廓跟踪和图搜索"><a href="#轮廓跟踪和图搜索" class="headerlink" title="轮廓跟踪和图搜索"></a>轮廓跟踪和图搜索</h5><ul>
<li>确定作为搜索起点的边缘点</li>
<li>确定和采取一种合适的数据结构和搜索机理，在已经发现的轮廓点基础上确定新的轮廓点</li>
<li>确定搜索终结的准则或者终止条件，满足条件时停止进程，结束搜索</li>
</ul>
<p>个人认为算是一种路径搜索算法，边界点和边界段可以用图结构表示，通过在图中进行搜索对应最小代价的通道也可以找到闭合边界。</p>
<p>边缘元素是2个互为4-近邻的像素的边缘，每个由像素p和q确定的边缘元素对应一个代价函数：</p>
<center>
    $
    c(p,q) = H- [f(p)-f(q)]
    $
</center>

<p>其中H为图像中的最大灰度值，代价函数的取值与像素之间的灰度差成反比，需要找寻的边界时代价最小的路径</p>
<p>example：</p>
<center>
    <img src="/images/dip/dip7_3.webp" width="400">
</center>

<h5 id="哈夫变换"><a href="#哈夫变换" class="headerlink" title="哈夫变换"></a>哈夫变换</h5><p>利用图像的全局特性直接检测目标轮廓</p>
<p>提出：从像素之间的整体关系出发，检测目标边界</p>
<p>把在图像空间里的直线检测问题转换为参数空间里对点的检测问题，通过在参数空间里进行简单的累加统计完成检测任务。</p>
<p>涉及到坐标系变换与解析，可看其他资料进一步了解并理解推导。</p>
<p>&nbsp;</p>
<h4 id="阈值分割"><a href="#阈值分割" class="headerlink" title="阈值分割"></a>阈值分割</h4><p>字面理解，阈值分割方法的关键是选取合适的阈值</p>
<p>有以下几种方法：</p>
<ul>
<li>全局阈值</li>
<li>局部阈值</li>
<li>动态/自适应阈值</li>
</ul>
<h5 id="全局阈值"><a href="#全局阈值" class="headerlink" title="全局阈值"></a>全局阈值</h5><p>自动获取阈值T的方法：</p>
<ul>
<li>选取一个T的初始估计值，一般取图像的平均灰度</li>
<li>用T分割图像，G1为所有灰度值大于T的，剩余为G2</li>
<li>对G1和G2中所有像素计算平均灰度值g1和g2</li>
<li>计算新的阈值$T_1 = \frac{1}{2}(g_1+g_2)$</li>
<li>重复步骤2~4，直到迭代得到的T值小于等于T初始值</li>
</ul>
<h5 id="基本自适应阈值"><a href="#基本自适应阈值" class="headerlink" title="基本自适应阈值"></a>基本自适应阈值</h5><p>单一全局阈值存在的问题：不均匀亮度图像无法有效分割</p>
<p>解决方法：将图像进一步细分为子图像，并对不同的子图像使用不同的阈值处理</p>
<p>问题：如何将图像进行细分，且如何为得到的子图像估计阈值</p>
<p>对于仅包含2个主要灰度级的区域，令z表示灰度级值，则两个灰度区域的直方图可以看作其概率密度函数的估计p(z)，如果p(z)已知，则它能够确定一个最有阈值，将图像分割成两个可以区分的部分，下式中P1是属于目标对象的概率，P2是属于背景像素的概率，有$P_1+P_2 = 1$</p>
<p>最优阈值：</p>
<center>
    $T=\frac{\mu_{1}+\mu_{2}}{2}+\frac{\sigma^{2}}{\mu_{1}-\mu_{2}} \ln \left(\frac{P_{2}}{P_{1}}\right)$
</center>

<p>数学推导略复杂，遂省略</p>
<h5 id="通过边界特性选择阈值"><a href="#通过边界特性选择阈值" class="headerlink" title="通过边界特性选择阈值"></a>通过边界特性选择阈值</h5><p>基本思想，将直方图修正为较为直观的形态：波峰高且窄，对称，且被很深的波谷分开。</p>
<p>修正方法：用<strong>微分算子</strong>处理图像，使得图像只剩下边界中心两边的值，因此直方图也只剩下边缘的像素。边缘上的点在区域内和区域外的概率相等，因此可以增加波峰的对称性</p>
<p>&nbsp;</p>
<h4 id="聚类分割"><a href="#聚类分割" class="headerlink" title="聚类分割"></a>聚类分割</h4><p>机器学习常见算法</p>
<p>&nbsp;</p>
<h4 id="区域分割"><a href="#区域分割" class="headerlink" title="区域分割"></a>区域分割</h4><p>概念：将整幅图像区域划分为n个子区域，满足完备性、连通性、独立性、互斥性</p>
<h5 id="区域生长法"><a href="#区域生长法" class="headerlink" title="区域生长法"></a>区域生长法</h5><p>一种从单个像素出发，逐渐合并以形成所需分割区域的技术</p>
<p>核心：相似条件的确定</p>
<p>生长准则：</p>
<h6 id="基于区域灰度差（字面意思）"><a href="#基于区域灰度差（字面意思）" class="headerlink" title="基于区域灰度差（字面意思）"></a>基于区域灰度差（字面意思）</h6><h6 id="基于区域内灰度分布统计性质"><a href="#基于区域内灰度分布统计性质" class="headerlink" title="基于区域内灰度分布统计性质"></a>基于区域内灰度分布统计性质</h6><ul>
<li>把像素分成互不重叠的小区域；</li>
<li>比较邻接区域的累积灰度直方图，根据灰度分布的相似性进行区域合并；</li>
<li>设定终止准则，通过反复进行上一个步骤中的操作将各个区域依次合并直到满足终止准则</li>
</ul>
<h6 id="基于区域形状"><a href="#基于区域形状" class="headerlink" title="基于区域形状"></a>基于区域形状</h6><p><strong>方法1：</strong>把图像分割成灰度固定的区域，设两相邻区域的周长为P1和P2，把两区域共同边界线两侧灰度差小于给定值的那部分设为L，如果有：（T1为预定的阈值）</p>
<center>
    $\frac{L}{\min \left\{P_{1}, P_{2}\right\}}>T_{1}
    $
</center>

<p>则合并两区域</p>
<p><strong>方法2：</strong>把图像分割成灰度固定的区域，设两邻接区域的共同边界长度为B，把两区域共同边界线两侧灰度差小于给定值的那部分长度设为L，如果有：（T2为预定阈值）</p>
<center>
    $\frac{L}{B}>T_{2}
    $
</center>

<p>则合并两个区域</p>
<p><strong>第一种方法是合并两邻接区域的共同边界中对比度较低部分占整个区域边界份额较大的区域，</strong></p>
<p><strong>第二种方法则是合并两邻接区域的共同边界中对比度较低部分比较多的区域。</strong></p>
<p>&nbsp;</p>
<h4 id="分裂合并"><a href="#分裂合并" class="headerlink" title="分裂合并"></a>分裂合并</h4><p>思想：先把图像分成任意大小且不重叠的区域，然后根据准则合并或者分裂这些区域，迭代直到实现分割</p>
<p>&nbsp;</p>
<h4 id="基于形态学分水岭的分割"><a href="#基于形态学分水岭的分割" class="headerlink" title="基于形态学分水岭的分割"></a>基于形态学分水岭的分割</h4><p>又称为watershed变换，是一种借鉴形态学理论的分割方法。它利用图像区域特性来分割图像，将边缘检测与区域生长的优点结合起来，能够得到单像素的、连通的、封闭的且位置准确的轮廓</p>
<p><strong>把图像看成3-D地形的表示，即2-D的地基（对应图像空间）加上第3维的高度（对应图像灰度）</strong></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>《数字图像处理》这本书看了七七八八，有一些内容很有趣，知道opencv库的一些底层原理还是有必要的。其中有一些内容，例如：图像理解、数字图像编码技术、图像模式分类等，没有再继续看。希望可以在实践中巩固这些知识。</p>
]]></content>
      <categories>
        <category>Learning Record</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MLX90640的手持红外热成像仪</title>
    <url>/2025/02/26/250226/</url>
    <content><![CDATA[<h2 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h2><ol>
<li><p>DIY好玩捏</p>
</li>
<li><p>电路工作时有时需要检查元件发热情况，但用手触摸元件有一定的风险，因此需要一种无接触式的多点测温设备</p>
</li>
</ol>
<p>于是开始了解到热成像这个测温方式，以下是软硬件方案</p>
<h2 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h2><h3 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h3><p>​        采用上下两块板子对插组合，为了减少复杂度，留了排母方便直插LCD与传感器模组。</p>
<h4 id="BOARD1-MCU与外设"><a href="#BOARD1-MCU与外设" class="headerlink" title="BOARD1: MCU与外设"></a>BOARD1: MCU与外设</h4><ul>
<li>采用STM32F407作为主控，512KB  Flash，其实没特别注意选型，只是手上有这个开发板，要压缩成本的话用其他型号也可以</li>
<li>红外传感模组为MLX90640 BAA，这个价格比较贵，比其他元件加起来都贵</li>
<li>屏幕模组为1.44寸TFT-LCD，也是现成的，买了俩还剩一个，下次做别的东西的时候给用了吧</li>
<li>留了串口测试点和烧录测试点</li>
</ul>
<center>
    <img src="/images/thermal_camera/tc_board1.webp" width="800">
</center>


<h4 id="BOARD2-POWER"><a href="#BOARD2-POWER" class="headerlink" title="BOARD2: POWER"></a>BOARD2: POWER</h4><ul>
<li>3.7V锂电池供电，可通过USB接口经过LGS4084H电源管理芯片给锂电池充电</li>
<li>经过一个LDO稳到3.3V给MCU整体供电，VDDA和VCC用磁珠滤波隔离了一下</li>
</ul>
<center>
    <img src="/images/thermal_camera/tc_board2.webp" width="800">
</center>


<p>电源板后续涉及锂电池供电DIY的倒是可以继续沿用</p>
<center>
    <img src="/images/thermal_camera/battery.webp" width="600">
</center>


<p>立创打样PCB，自己贴片，PCB板框留了一些M3螺孔方便组装。</p>
<h3 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a><strong>软件部分</strong></h3><p>通讯接口涉及IIC与SPI，以及图像测试的时候用了一下UART，均比较基础。使用硬件IIC进行传感器模组与MCU间的通信，模组官方提供了接口可调用，可读取温度值。RGB转换用了开源的函数：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*pass in value and figure out R G B
    several published ways to do this I basically graphed R G B and developed simple linear equations
    again a 5-6-5 color display will not need accurate temp to R G B color calculation
    equations based on
    http://web-tech.ga-usa.com/2012/05/creating-a-custom-hot-to-cold-temperature-color-gradient-for-use-with-rrdtool/index.html
  */</span>
<span class="token keyword">static</span> <span class="token class-name">uint16_t</span> <span class="token function">TempToColor</span><span class="token punctuation">(</span><span class="token keyword">float</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  red <span class="token operator">=</span> <span class="token function">constrain</span><span class="token punctuation">(</span><span class="token number">255.0f</span> <span class="token operator">/</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> val <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">255.0f</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">></span> minTemp<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    green <span class="token operator">=</span> <span class="token function">constrain</span><span class="token punctuation">(</span><span class="token number">255.0f</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> minTemp<span class="token punctuation">)</span> <span class="token operator">*</span> val <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">255.0f</span> <span class="token operator">*</span> minTemp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> minTemp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">>=</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    green <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    green <span class="token operator">=</span> <span class="token function">constrain</span><span class="token punctuation">(</span><span class="token number">255.0f</span> <span class="token operator">/</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> val <span class="token operator">-</span> <span class="token punctuation">(</span>d <span class="token operator">*</span> <span class="token number">255.0f</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">></span> d<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    green <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    blue <span class="token operator">=</span> <span class="token function">constrain</span><span class="token punctuation">(</span><span class="token number">255.0f</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> val <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">255.0f</span> <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    blue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    blue <span class="token operator">=</span> <span class="token function">constrain</span><span class="token punctuation">(</span><span class="token number">240.0f</span> <span class="token operator">/</span> <span class="token punctuation">(</span>maxTemp <span class="token operator">-</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> val <span class="token operator">-</span> <span class="token punctuation">(</span>d <span class="token operator">*</span> <span class="token number">240.0f</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>maxTemp <span class="token operator">-</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// use the displays color mapping function to get 5-6-5 color palet (R=5 bits, G=6 bits, B-5 bits)</span>
  <span class="token keyword">return</span> <span class="token function">BSP_LCD_GetColor565</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该传感器成图32x24像素，而使用的LCD是128x128的，于是我用4个像素作为一个大像素来填充，并增加了一个图例和一个最大最小值来提供量化，并填充一下屏幕留白</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawPicture</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">uint8_t</span> cell_size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 格子大小 4x4</span>
    <span class="token class-name">uint8_t</span> start_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 水平居中（128 - 32*4 = 0）</span>
    <span class="token class-name">uint8_t</span> start_y <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token comment">// 垂直居中（(128 - 24*4)/2 = 16）</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">ST7735_FillRectangle</span><span class="token punctuation">(</span>
                start_x <span class="token operator">+</span> x <span class="token operator">*</span> cell_size<span class="token punctuation">,</span>
                start_y <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">23</span> <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> cell_size<span class="token punctuation">,</span>
                cell_size<span class="token punctuation">,</span>
                cell_size<span class="token punctuation">,</span>
                <span class="token function">TempToColor</span><span class="token punctuation">(</span>tempValues<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawLegend</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">uint8_t</span> legend_height <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>               <span class="token comment">// 图例高度（像素）</span>
    <span class="token class-name">uint8_t</span> legend_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token comment">// 图例顶部位置（y=0）</span>
    <span class="token class-name">uint8_t</span> legend_width <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>               <span class="token comment">// 图例宽度（留左右边距）</span>
    <span class="token class-name">uint8_t</span> start_x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>                      <span class="token comment">// 图例左侧起始位置（x=4）</span>

    <span class="token comment">// 绘制温度颜色渐变条（水平方向）</span>
    <span class="token keyword">float</span> temp_range <span class="token operator">=</span> maxTemp <span class="token operator">-</span> minTemp<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> legend_width<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">float</span> temp <span class="token operator">=</span> minTemp <span class="token operator">+</span> temp_range <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>legend_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">uint16_t</span> color <span class="token operator">=</span> <span class="token function">TempToColor</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 绘制水平线（从左到右）</span>
        <span class="token function">ST7735_DrawLine</span><span class="token punctuation">(</span>start_x <span class="token operator">+</span> x<span class="token punctuation">,</span> legend_y<span class="token punctuation">,</span> start_x <span class="token operator">+</span> x<span class="token punctuation">,</span> legend_y <span class="token operator">+</span> legend_height<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 显示最小/最大温度标签</span>
<span class="token comment">//    memset(tempBuffer, 0, sizeof(tempBuffer));</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>tempBuffer<span class="token punctuation">,</span> <span class="token string">"&lt;%2.1f       "</span><span class="token punctuation">,</span> minTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ST7735_WriteString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> tempBuffer<span class="token punctuation">,</span> Font_7x10<span class="token punctuation">,</span> ST7735_WHITE<span class="token punctuation">,</span> ST7735_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">////    memset(tempBuffer, 0, sizeof(tempBuffer));</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>tempBuffer<span class="token punctuation">,</span> <span class="token string">"%2.1f>       "</span><span class="token punctuation">,</span> maxTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ST7735_WriteString</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> tempBuffer<span class="token punctuation">,</span> Font_7x10<span class="token punctuation">,</span> ST7735_WHITE<span class="token punctuation">,</span> ST7735_BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后在主循环里轮询就可以了，屏幕刷新率一般，眨眼补帧。</p>
<p>整体软件部分比较清晰，本来想加一些按键交互，修改颜色范围，存储图片到外部flash之类的功能，然后懒了。</p>
<p>后续学了操作系统和LVGL库之后再搞点好玩的吧，感觉大部分DIY应用裸机完全够了…</p>
<center>
    <img src="/images/thermal_camera/theramal_camera.webp" width="600">
</center>


<h3 id="小问题合集："><a href="#小问题合集：" class="headerlink" title="小问题合集："></a><strong>小问题合集：</strong></h3><h3 id="problem1：使用ST-Link下载过一次程序后发现无法继续下载"><a href="#problem1：使用ST-Link下载过一次程序后发现无法继续下载" class="headerlink" title="problem1：使用ST-Link下载过一次程序后发现无法继续下载"></a><strong>problem1：使用ST-Link下载过一次程序后发现无法继续下载</strong></h3><ol>
<li>检查设备管理器，确保有正确的ST-Link驱动</li>
<li>检查Keil软件配置，确保导入正确的型号版本</li>
<li>检查引脚配置，发现问题：</li>
</ol>
<center>
    <img src="/images/thermal_camera/stlink_problem.webp" width="400">
</center>


<p>​    配置的IIC通信引脚占用了SWD下载引脚<em>（STM32默认的PA13 &amp;PA14）</em>，引脚输入输出模式不适配，显然后续无法下载，遂改之，问题解决。（图示仅供参考）</p>
<h3 id="problem2：HardFault中断触发"><a href="#problem2：HardFault中断触发" class="headerlink" title="problem2：HardFault中断触发"></a><strong>problem2：HardFault中断触发</strong></h3><p>栈空间不足，多分配点就ok</p>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=114448530415517&bvid=BV1GiVwzCEJM&cid=29784345814&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe>
</div>
]]></content>
      <categories>
        <category>Projects &amp; DIY</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>手持红外热成像仪V2.0-TinyML嵌入轻量级神经网络(on going)</title>
    <url>/2025/05/10/250510/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Projects &amp; DIY</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>C</tag>
        <tag>图像处理</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
</search>
